<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Org-mode scraps</title>
 <link href="http://eschulte.github.com/org-scraps/atom.xml" rel="self"/>
 <link href="http://eschulte.github.com/org-scraps/"/>
 <updated>2011-09-04:11:01:50-06:00</updated>
 <id>http://eschulte.github.com/org-scraps/</id>
 <author>
   <name>Eric Schulte</name>
   <email>eric.schulte@gmail.com</email>
 </author>"
<entry>
   <title>:table-results-param</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-:table-results-param.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-:table-results-param.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** </span><span class="org-level-2"><span class="org-code">=:table=</span></span><span class="org-level-2"> results param</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results table
</span>  8
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-table">| 8 |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>advanced-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-advanced-table.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-advanced-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** advanced table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
   <span class="org-table">| DATA             | WHAT       | WHERE       | HOW MUCH |</span>
   <span class="org-table">|------------------+------------+-------------+----------|</span>
   <span class="org-table">| </span><span class="org-date">[2009-09-25 Fri]</span><span class="org-table"> |            |             |    28.95 |</span>
   |------------------+------------+-------------+----------|
   |                  | food       | supermarket |     7.85 |
   |                  | ticket bus |             |      2.3 |
   |                  | tea + ice  | ice uno     |      4.4 |
   |                  | ticket     |             |     14.4 |
   |------------------+------------+-------------+----------|
   | [2009-09-26 Sat] |            |             |       41 |

#+begin_src emacs-lisp
  (let ((total 0) (responding t) purchases)
    (while responding
      (setq purchases
            (cons
             (list ""
                   (read-from-minibuffer "What: ")
                   (read-from-minibuffer "Where: ")
                   (read-minibuffer "How Much: "))
             purchases))
      (setq responding (y-or-n-p "more? ")))
    (append 
     purchases
     (list
      (list
       (format-time-string "%Y-%m-%d" (current-time))
       "" "" (progn
               (mapc (lambda (purchase)
                       (setq total (+ total (fourth purchase))))
                     purchases)
               total)))))
#+end_src

#+resname:
| ""           | "fish and chips" | "diner"  |  9.78 |
| ""           | "food"           | "subway" |  5.45 |
| "2009-09-29" | ""               | ""       | 15.23 |

   </pre>
   </content>
</entry>
<entry>
   <title>and-then-more</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-and-then-more.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-and-then-more.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** and then more</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
and more stuffs here
   </pre>
   </content>
</entry>
<entry>
   <title>asymptote-cosine</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-asymptote-cosine.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-asymptote-cosine.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** asymptote cosine</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src asymptote :exports code
</span>  import graph;
  
  size(0,4cm);
  
  real f(real t) {return cos(t);}
  
  path g=polargraph(f,0,2pi,operator ..)--cycle;
  filldraw(g,pink);
  
  for(int i=0; i &lt; 8; ++i) {
    real j = 0.125 + 0.125*i;
    real h(real t) {return j;};
    path k=polargraph(h, -(acos(j)), acos(j), operator ..);
    draw(k,blue);
  }
  
  xaxis("$x$",above=true);
  yaxis("$y$",above=true);
  
  dot("$(pi,0)$",(1,0),N);<span class="org-meta-line">
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>asymptote</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-asymptote.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-asymptote.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** asymptote</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src asymptote :file asymptote-test.png :exports code
</span>  import graph;
  
  size(0,4cm);
  
  real f(real t) {return 1+cos(t);}
  
  path g=polargraph(f,0,2pi,operator ..)--cycle;
  filldraw(g,pink);
  
  xaxis("$x$",above=true);
  yaxis("$y$",above=true);
  
  dot("$(a,0)$",(1,0),N);
  dot("$(2a,0)$",(2,0),N+E);<span class="org-meta-line">
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-link">[[file:asymptote-test.png]]</span>

   </pre>
   </content>
</entry>
<entry>
   <title>cached-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-cached-results.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-cached-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** cached results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :cache yes
</span>   <span class="starter-kit-paren">(</span>setq org-babel-default-header-args '<span class="starter-kit-paren">((</span><span class="builtin">:session</span> . <span class="string">"none"</span><span class="starter-kit-paren">)</span>
                                         <span class="starter-kit-paren">(</span><span class="builtin">:results</span> . <span class="string">"replace"</span><span class="starter-kit-paren">)</span>
                                         <span class="starter-kit-paren">(</span><span class="builtin">:exports</span> . <span class="string">"code"</span><span class="starter-kit-paren">)(</span><span class="builtin">:cache</span><span class="starter-kit-paren">)))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results[937269632ae5b5eee5c93f9eb50e0bc55e34520d]:
</span><span class="org-table">| (:session . none) | (:results . replace) | (:exports . code) | (:cache) |</span>

<span class="org-meta-line">#+srcname: eric-schulte
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :cache yes
</span>   <span class="starter-kit-paren">(</span>+ 5 7 1<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+results[005b04829608b3d22b61686e90309af3a9a6fe7c]: eric-schulte
: 13

#+begin_src ditaa :file caching-example.png
    +--------------------+
    |                    |     +-----------+
    |                    |     |           |
    |                    |     |           |
    |      +----+        |     |           |
    |      |    |        |     +-----------+
    |      +----+        |
    |                    |
    +--------------------+
#+end_src

#+results[fd11ddbfd00f6038e6e37db71ddaf43d65b0e200]:
[[file:caching-example.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>changing-source-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-changing-source-name.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-changing-source-name.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** changing source name</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+srcname: emacs-nine
</span><span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  8
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname: emacs-nine
</span><span class="org-code">: 8
</span>
<span class="org-meta-line">#+resname: emacs-eight
</span><span class="org-code">: 8
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>clojure</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-clojure.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-clojure.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** clojure</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src clojure :results silent
</span>  <span class="starter-kit-paren">(</span><span class="builtin">list</span> 8 9<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>code-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-code-results.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-code-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** code results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-level-3">*** emacs lisp</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">    :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results code
</span>  <span class="starter-kit-paren">(</span>mapcar <span class="starter-kit-paren">(</span><span class="keyword">lambda</span> <span class="starter-kit-paren">(</span>el<span class="starter-kit-paren">)</span> <span class="starter-kit-paren">(</span><span class="keyword">lambda</span> <span class="starter-kit-paren">(</span>item<span class="starter-kit-paren">)</span> <span class="starter-kit-paren">(</span>+ item el<span class="starter-kit-paren">)))</span> '<span class="starter-kit-paren">(</span>1 2 3 4 5<span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
#+resname:
#+BEGIN_SRC emacs-lisp
((lambda
   (item)
   (+ item el))
 (lambda
   (item)
   (+ item el))
 (lambda
   (item)
   (+ item el))
 (lambda
   (item)
   (+ item el))
 (lambda
   (item)
   (+ item el)))
#+END_SRC

#+begin_src emacs-lisp :results code
  (mapcar (lambda (el) (* el el)) '(1 2 3 89))
#+end_src

#+resname:
#+BEGIN_SRC emacs-lisp
(1 4 9 7921)
#+END_SRC

*** ruby
    :PROPERTIES:
    :DATE:     2009-11-20
    :END:

#+begin_src ruby :results code
  [1, 2, 33, 4].map{|n| "the number #{n}"}
#+end_src

#+resname:
#+BEGIN_SRC ruby
  ["the number 1", "the number 2", "the number 33", "the number 4"]
#+END_SRC

#+begin_src ruby :session :results code 
  [1, 2, 33, 4].map{|n| n + 10 }
#+end_src

#+resname:
#+BEGIN_SRC ruby
[11, 12, 43, 14]
#+END_SRC

*** python
    :PROPERTIES:
    :DATE:     2009-11-20
    :END:

#+begin_src python :results code
  ['one', 'two', 'three']
#+end_src

#+resname:
#+BEGIN_SRC python
['one', 'two', 'three']
#+END_SRC

#+begin_src python :results code
  [1, 2, 33, 4]
#+end_src

#+resname:
#+BEGIN_SRC python
[1, 2, 33, 4]
#+END_SRC

#+begin_src python :session :results code 
  [1, 2, 33, 4]
#+end_src

#+resname:
#+BEGIN_SRC python
[1, 2, 33, 4]
#+END_SRC

   </pre>
   </content>
</entry>
<entry>
   <title>dynamic-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-dynamic-table.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-dynamic-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** dynamic table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+TBLNAME: todays-clock
#+BEGIN: clocktable :maxlevel 2 :block today :scope tree1 :link t
</span>Clock summary at [2009-09-15 Tue 08:51], for Tuesday, September 15, 2009.

| L | Headline     | Time   |      |
|---+--------------+--------+------|
|   | *Total time* | *1:10* |      |
|---+--------------+--------+------|
| 1 | [[file:/Users/eschulte/Desktop/test.org::top][top]]          | 1:10   |    1 |
| 2 | [[file:/Users/eschulte/Desktop/test.org::show%20all][show all]]     |        | 1:00 |
| 2 | [[file:/Users/eschulte/Desktop/test.org::later][later]]        |        | 0:10 |
#+END: clocktable

#+begin_src emacs-lisp :var data=todays-clock(1,1)
(message "table is %S" data)
#+end_src

#+resname:
: table is (("L" "Headline" "Time" "") hline ("" "*Total time*" "*1:10*" "") hline (1 "[[file:/Users/eschulte/Desktop/test.org::top][top]]" "1:10" 1) (2 "[[file:/Users/eschulte/Desktop/test.org::show%20all][show all]]" "" "1:00") (2 "[[file:/Users/eschulte/Desktop/test.org::later][later]]" "" "0:10"))

#+begin_src R :session R-pie-example :var times=todays-clock :results silent
pie(times[2:length(times),4], labels = times[2:length(times),2])
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>elisp-references</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-elisp-references.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-elisp-references.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** elisp references</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>   <span class="starter-kit-paren">(</span>setq first 10<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+srcname: resolve(name=nil)
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>  <span class="starter-kit-paren">(</span>eval <span class="starter-kit-paren">(</span>intern name<span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src python :var a=resolve(name="first")
</span>  <span class="keyword">return </span>a + 10
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>elisp-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-elisp-variables.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-elisp-variables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** elisp variables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src ditaa :file (format "%d.png" 45)
</span>      +-----------+
      |           |
      |           |
      |           |
      |           |
      +-----------+
<span class="org-block-end-line">#+end_src
</span>
#+results:
<span class="org-link">[[file:45.png]]</span>
   </pre>
   </content>
</entry>
<entry>
   <title>empty-output-results-for-emacs-lisp</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-empty-output-results-for-emacs-lisp.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-empty-output-results-for-emacs-lisp.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** empty </span><span class="org-level-2"><span class="org-code">=output=</span></span><span class="org-level-2"> results for emacs-lisp</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results output
</span>   8
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>gnuplot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-gnuplot.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-gnuplot.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** gnuplot</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src gnuplot
</span><span class="keyword">plot</span> <span class="variable-name">cosx
</span><span class="org-block-end-line">#+end_src
</span>

<span class="org-meta-line">#+end_src
</span>      

   </pre>
   </content>
</entry>
<entry>
   <title>haskell-and-tables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-haskell-and-tables.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-haskell-and-tables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** haskell and tables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src haskell
</span>  sumListCond <span class="variable-name">::</span> <span class="type">Int</span> <span class="variable-name">-&gt;</span> <span class="type">Int</span> <span class="variable-name">-&gt;</span> [<span class="type">Int</span>] <span class="variable-name">-&gt;</span> <span class="type">Int</span>
  sumListCond l n xs
      <span class="variable-name">|</span> foldl (<span class="variable-name">+</span>) 0 (take l xs) <span class="variable-name">&lt;=</span> n <span class="variable-name">=</span> sumListCond (l <span class="variable-name">+</span> 1) n xs
      <span class="variable-name">|</span> otherwise <span class="variable-name">=</span> foldl (<span class="variable-name">+</span>) 0 (take (l <span class="variable-name">- </span>1) xs)
<span class="org-block-end-line">#+end_src
</span><span class="org-block-begin-line">#+begin_src oz
</span>  <span class="org-meta-line">
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>haskell</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-haskell.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-haskell.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** haskell</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src haskell
</span>  powerSet <span class="variable-name">::</span> [a] <span class="variable-name">-&gt;</span> [[a]]
  powerSet <span class="variable-name">=</span> foldr (<span class="variable-name">\</span> x ps <span class="variable-name">-&gt;</span> map (<span class="variable-name">\</span> y <span class="variable-name">-&gt;</span> x <span class="type">:</span> y) ps <span class="variable-name">++</span> ps ) [<span class="type">[]]</span>
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src haskell
</span>  powerSet [1, 2, 3]
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>hiding-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-hiding-results.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-hiding-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** hiding results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  <span class="starter-kit-paren">(</span>mapcar <span class="starter-kit-paren">(</span><span class="keyword">lambda</span> <span class="starter-kit-paren">(</span>el<span class="starter-kit-paren">)</span> <span class="starter-kit-paren">(</span>list el<span class="starter-kit-paren">))</span> <span class="starter-kit-paren">(</span>number-sequence 0 20<span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">|  0 |</span>
<span class="org-table">|  1 |</span>
<span class="org-table">|  2 |</span>
<span class="org-table">|  3 |</span>
<span class="org-table">|  4 |</span>
<span class="org-table">|  5 |</span>
<span class="org-table">|  6 |</span>
<span class="org-table">|  7 |</span>
<span class="org-table">|  8 |</span>
<span class="org-table">|  9 |</span>
<span class="org-table">| 10 |</span>
<span class="org-table">| 11 |</span>
| 12 |
| 13 |
| 14 |
| 15 |
| 16 |
| 17 |
| 18 |
| 19 |
| 20 |

   </pre>
   </content>
</entry>
<entry>
   <title>indentation</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-indentation.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-indentation.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** indentation</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src python
</span>          9
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>indented</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-indented.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-indented.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** indented</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">   #+begin_src emacs-lisp
</span>     <span class="starter-kit-paren">(</span>message <span class="string">"I ran!!"</span><span class="starter-kit-paren">) </span>  
<span class="org-block-end-line">   #+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: I ran!!
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>indexing-into-gnuplot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-indexing-into-gnuplot.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-indexing-into-gnuplot.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** indexing into gnuplot</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+tblname: squares
</span><span class="org-table">| 1 |  1 |</span>
<span class="org-table">| 2 |  4 |</span>
<span class="org-table">| 3 |  9 |</span>
<span class="org-table">| 4 | 16 |</span>
<span class="org-table">| 5 | 25 |</span>
<span class="org-table">| 6 | 36 |</span>

<span class="org-block-begin-line">#+begin_src gnuplot :var data=squares :results silent
</span><span class="keyword">plot</span> <span class="variable-name">data</span> <span class="type">using</span> 1:2 <span class="type">with</span> <span class="function-name">lines
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+tblname: squares-with-sum
</span><span class="org-table">|  1 |  1 |</span>
<span class="org-table">|  2 |  4 |</span>
<span class="org-table">|  3 |  9 |</span>
<span class="org-table">|  4 | 16 |</span>
<span class="org-table">|  5 | 25 |</span>
<span class="org-table">|  6 | 36 |</span>
<span class="org-table">|----+----|</span>
<span class="org-table">| 21 | 91 |</span>

<span class="org-block-begin-line">#+begin_src gnuplot :var data=squares-with-sum[0:-3] :results silent
</span>  <span class="keyword">plot</span> <span class="variable-name">data</span> <span class="type">using</span> 1:2 <span class="type">with</span> <span class="function-name">lines
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>indexing-into-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-indexing-into-results.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-indexing-into-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** indexing into results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+data: indexable-table
</span><span class="org-table">| eric    |</span>
<span class="org-table">| michael |</span>
<span class="org-table">| schulte |</span>
<span class="org-table">| is      |</span>
<span class="org-table">| my      |</span>
<span class="org-table">| name    |</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var data=indexable-table[2:4]
</span>   data
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| schulte |</span>
<span class="org-table">| is      |</span>
<span class="org-table">| my      |</span>

<span class="org-meta-line">#+tblname: multidimensional-indexing
</span><span class="org-table">| 1 |  2 |</span>
<span class="org-table">| 3 |  4 |</span>
<span class="org-table">| 5 |  6 |</span>
<span class="org-table">| 7 |  8 |</span>
<span class="org-table">| 9 | 10 |</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var data=multidimensional-indexing[0:-2]
</span>   data
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-table">| 1 | 2 |</span>
<span class="org-table">| 3 | 4 |</span>
| 5 | 6 |
| 7 | 8 |

   </pre>
   </content>
</entry>
<entry>
   <title>later</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-later.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-later.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** later</span>
   <span class="org-special-keyword">CLOCK:</span> <span class="org-date">[2009-09-15 Tue 09:41]--[2009-09-15 Tue 09:51]</span> =&gt;  0:10
   :PROPERTIES:
   :DATE:     2009-11-20
   :END:
stuff here

   </pre>
   </content>
</entry>
<entry>
   <title>latex-pngs</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-latex-pngs.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-latex-pngs.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** latex pngs</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
$x \mapsto y$

<span class="org-level-3">*** Theorem</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">    :END:</span>
$|consts(t)| \leq sizes(t)$

- by induction on the structure of t
- base cases are $t \in [true, false, 0]$: 
  - $|consts(t)| = |[t]| = 1 = size(t)$
- inductive size
  - $t \in [succ(t_1), pred(t_1), iszero(t_1)]$:
    - $|consts(t)| = |consts(t_1)| = |[t]| \leq size(t_1) &lt; size(t)$
  - $t = if\, t_1 \, then \, t_2 \, else t_3$
    - $|consts(t)| = |consts(t_1) \cup consts(t_1) \cup consts(t_1)|$
    - $\leq |consts(t_1)| + |consts(t_1)| + |consts(t_1)|$
    - $\leq size(t_1) + size(t_1) + size(t_1)$
    - $&lt; size(t)$

   </pre>
   </content>
</entry>
<entry>
   <title>lua-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-lua-export.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-lua-export.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** lua export</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+srcname: determine the neighbors of the segments that the bisector hits
</span><span class="org-block-begin-line">#+begin_src lua :tangle no :exports code
</span>  local s1, s2 = intersecting_segs[1], intersecting_segs[2]
  local n1 = table_find_segment(cell.neighbors, s1)
  local n2 = table_find_segment(cell.neighbors, s2)<span class="org-meta-line">
</span><span class="org-block-end-line">#+end_src
</span>
I got:
<span class="org-block-begin-line">#+begin_example
</span><span class="org-block">\lstset{language=lua}
\begin{lstlisting}
local s1, s2 = intersecting_segs[1], intersecting_segs[2]
local n1 = table_find_segment(cell.neighbors, s1)
local n2 = table_find_segment(cell.neighbors, s2)
\end{lstlisting}
</span><span class="org-block-end-line">#+end_example
</span>
Emacs -Q got:
#+begin_example
\begin{verbatim}
local s1, s2 = intersecting_segs[1], intersecting_segs[2]
local n1 = table_find_segment(cell.neighbors, s1)
local n2 = table_find_segment(cell.neighbors, s2)
\end{verbatim}
#+end_example

Emacs -Q + Org-babel got:
#+begin_example
\begin{verbatim}
local s1, s2 = intersecting_segs[1], intersecting_segs[2]
local n1 = table_find_segment(cell.neighbors, s1)
local n2 = table_find_segment(cell.neighbors, s2)
\end{verbatim}
#+end_example

   </pre>
   </content>
</entry>
<entry>
   <title>multiple-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-multiple-arguments.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-multiple-arguments.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** multiple arguments</span>
   :PROPERTIES:
   :DATE:     2009-11-20
   :END:

#+begin_src emacs-lisp :var first=9 :var second=10
  (+ first second)
#+end_src

#+resname:
: 19

   </pre>
   </content>
</entry>
<entry>
   <title>noweb-referernces</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-noweb-referernces.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-noweb-referernces.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** noweb referernces</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+srcname: noweb-example
</span><span class="org-block-begin-line">#+begin_src ruby 
</span>  a = 28
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src ruby :noweb
</span>  <span class="comment-delimiter"># </span><span class="comment">&lt;&lt;noweb-example&gt;&gt;
 </span> a + 4
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: 32
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>persistent-python</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-persistent-python.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-persistent-python.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** persistent python</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src python :session :results silent
</span>  <span class="keyword">import </span>types
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src python :session
</span>  types.FunctionType
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: function
</span>
<span class="org-level-3">*** more persistent python</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:session:</span>  <span class="org-property-value">default</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">    :END:</span>

<span class="org-block-begin-line">#+begin_src python :results silent
</span>  <span class="keyword">import </span>types
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src python
</span>  types.FunctionType
<span class="org-block-end-line">#+end_src
</span>
#+resname:
: function

   </pre>
   </content>
</entry>
<entry>
   <title>pp-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-pp-results.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-pp-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** </span><span class="org-level-2"><span class="org-code">=pp=</span></span><span class="org-level-2"> results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-level-3">*** python</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">    :END:</span>
<span class="org-block-begin-line">#+begin_src python :results pp :session
</span>  [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three']</span>
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: ['one', 'two', 'three', 'one', 'two', 'three', 'one', 'two', 'three']
</span>
*** ruby
    :PROPERTIES:
    :DATE:     2009-11-20
    :END:
#+begin_src ruby :results pp
  class Schulte
    attr_accessor :name, :age
  end
  
  eric = Schulte.new
  eric.name = "eric"
  eric.age = 27
  
  eric
#+end_src

#+resname:


#+begin_src ruby :results pp
  a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]
  a
#+end_src

#+resname:
#+begin_example
[1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3,
 1,
 2,
 3]
#+end_example

   </pre>
   </content>
</entry>
<entry>
   <title>pretty-print</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-pretty-print.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-pretty-print.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** pretty print</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :results scalar
</span>  '<span class="starter-kit-paren">(</span>1 2 3 4<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>quoted-latex</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-quoted-latex.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-quoted-latex.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** quoted latex</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

The following latex isn't exported correctly

<span class="org-block-begin-line">#+begin_latex
</span><span class="org-block">  \begin{code}
  data BTree = Leaf a
             | Node Tree Tree
  \end{code}
</span><span class="org-block-end-line">#+end_latex
</span>
<span class="org-block-begin-line">#+begin_src haskell
</span>  <span class="keyword">data</span> <span class="type">BTree</span> <span class="variable-name">=</span> <span class="type">Leaf</span> a
             <span class="variable-name">|</span> <span class="type">Node</span> <span class="type">Tree</span> <span class="type">Tree
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>reference-parts-of-tables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-reference-parts-of-tables.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-reference-parts-of-tables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** reference parts of tables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
   :END:

#+TBLNAME: squares
|  1 |   1 |
|  2 |   4 |
|  3 |   9 |
|  4 |  16 |
|  5 |  25 |
|  6 |  36 |
|  7 |  49 |
|  8 |  64 |
|  9 |  81 |
| 10 | 100 |
| 11 | 121 |
| 12 | 144 |
| 13 | 169 |
| 14 | 196 |
| 15 | 225 |
| 16 | 256 |
| 17 | 289 |
| 18 | 324 |
#+TBLFM: $2=$1*$1

#+begin_src gnuplot :var data=squares
set title "Implementing Gnuplot"
plot data using 1:2 with lines
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>results-switches</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-results-switches.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-results-switches.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** results switches</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src ruby :results output :results_switches -n
</span>  10.times <span class="keyword">do</span> |n|
    puts <span class="string">"-"</span>*n
  <span class="keyword">end
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-block-begin-line">#+begin_example -n
</span>
-
--
---
----
-----
------
-------
--------
---------<span class="org-meta-line">
</span><span class="org-block-end-line">#+end_example
</span>
<span class="org-block-begin-line">#+begin_src ruby :results output
</span>  10.times <span class="keyword">do</span> |n|
    puts <span class="string">"-"</span>*n
  <span class="keyword">end
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-block-begin-line">#+begin_example
</span><span class="org-block">  -
  --
  ---
  ----
  -----
  ------
  -------
  --------
  ---------
</span><span class="org-block-end-line">#+end_example
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>show-all</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-show-all.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-show-all.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** show all</span>
   <span class="org-special-keyword">CLOCK:</span> <span class="org-date">[2009-09-15 Tue 07:51]--[2009-09-15 Tue 08:51]</span> =&gt;  1:00
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:exports:</span>  <span class="org-property-value">both</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src ditaa :file blue.png
</span>   +----------------------+
   |                      |
   |                      |
   |          +-----------+
   |          |           |
   |          |           |
   |          |           |
   |          +-----------+
   |                      |
   +----------------------+
<span class="org-block-end-line">#+end_src
</span></pre>
  </body>
</html>
   </pre>
   </content>
</entry>
<entry>
   <title>simple-r</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-simple-r.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-simple-r.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple R</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src R :session R
</span>8
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: 8
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>simple-scalar</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-simple-scalar.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-simple-scalar.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple scalar</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

#+begin_src emacs-lisp
  (+ 1 3)
#+end_src

#+resname:
: 4

   </pre>
   </content>
</entry>
<entry>
   <title>switches-and-references</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-switches-and-references.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-switches-and-references.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** switches and references</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src ruby -n -r -l "(ref:%s)" :results output
</span>  <span class="keyword">class</span> <span class="type">Schulte</span>
    <span class="keyword">def</span> <span class="function-name">self.eric</span>
      puts <span class="constant">:imp</span> <span class="comment-delimiter"># </span><span class="comment">(ref:imp)
</span>    <span class="keyword">end</span>
  <span class="keyword">end</span>
  <span class="type">Schulte.</span>eric
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname[bb4cebabe38a5d3d43835acebdbe17aa3314cef6]:
</span><span class="org-code">: imp
</span>
Line no. <span class="org-link">[[(imp)]]</span> is important!

<span class="org-block-begin-line">#+begin_src ruby -n -r -l "(ref:%s)" :results output
</span>  <span class="keyword">class</span> <span class="type">Schulte</span>
    <span class="keyword">def</span> <span class="function-name">self.eric</span>
      puts <span class="constant">:imp</span> <span class="comment-delimiter"># </span><span class="comment">(ref:imp)
</span>    <span class="keyword">end</span>
  <span class="keyword">end</span>
  <span class="type">Schulte</span>.eric <span class="comment-delimiter"># </span><span class="comment">(ref:output)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname: eric
</span>: imp

   </pre>
   </content>
</entry>
<entry>
   <title>testing-srcname-aliases</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-testing-srcname-aliases.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-testing-srcname-aliases.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** testing srcname aliases</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: two
</span><span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  2
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var input=two
</span>  <span class="starter-kit-paren">(</span>+ input 1<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results[1ec6c8d3de6aaeac7b2720f1d801402e762875ea]:
</span><span class="org-code">: 3
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>unresolved-noweb-references</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-unresolved-noweb-references.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-unresolved-noweb-references.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** unresolved noweb references</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>  <span class="starter-kit-paren">(</span>setq org-babel-noweb-error-langs '<span class="starter-kit-paren">(</span><span class="string">"ruby"</span><span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+srcname: i-have-a-name
</span><span class="org-block-begin-line">#+begin_src ruby 
</span>  1 + 2
<span class="org-block-end-line">#+end_src
</span>

<span class="org-block-begin-line">#+begin_src ruby :noweb
</span>  <span class="string">&lt;&lt;i</span>-have-a-name&gt;&gt; + 3
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+resname:
</span><span class="org-code">: 6
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>xml-and-n3</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-20-xml-and-n3.html"/>
   <updated>2009-11-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-20-xml-and-n3.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** xml and n3</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   :DATE:     2009-11-20
   :END:

introduce org-babel to =xml= and =n3=
#+begin_src emacs-lisp :results silent
  (add-to-list 'org-babel-interpreters "xml")
  (add-to-list 'org-babel-interpreters "n3")
#+end_src

inform org-babel-tangle of their existence and file extensions
#+begin_src emacs-lisp :results silent
  (add-to-list 'org-babel-tangle-langs '("xml" "xml"))
  (add-to-list 'org-babel-tangle-langs '("n3" "n3"))
#+end_src

#+begin_src xml :tangle example
  &lt;first&gt;
  &lt;/first&gt;
#+end_src

#+begin_src n3 :tangle example
  n3 stuff
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>sh-with-sessions</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-27-sh-with-sessions.html"/>
   <updated>2009-11-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-27-sh-with-sessions.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** sh with sessions</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-27</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src sh :session eric
</span>  <span class="builtin">cd </span>~/Desktop
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src sh :session eric
</span>  <span class="builtin">cd </span>~/Desktop/clj/
  ls *.clj
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| "ants.clj" | "" | "concurrent.clj" | "" | "hello.clj" | "" | "spell-checker.clj" |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>whitespace-newline-results-issues</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-27-whitespace-newline-results-issues.html"/>
   <updated>2009-11-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-27-whitespace-newline-results-issues.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** whitespace/newline results issues</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-27</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo </span>output
<span class="org-block-end-line">#+end_src
</span>
This
<span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo </span>output
<span class="org-block-end-line">#+end_src
</span>text here

results in

t#+results:
<span class="org-code">: output
</span>ext here

<span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  <span class="starter-kit-paren">(</span>+ 1 1<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 2
</span></pre>
  </body>
</html>
   </pre>
   </content>
</entry>
<entry>
   <title>debug-hints</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-30-debug-hints.html"/>
   <updated>2009-11-30:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-30-debug-hints.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** debug hints</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-30</span>
<span class="org-special-keyword">   :END:</span>
from mailing list

- edebug-defun: (in emacs-lisp mode, C-u C-M-x) will mark the function
  so that when it is called, the interpreter stops and you can then
  single-step through it with &lt;SPACE&gt;. At each point, you can press
  "e" and evaluate variables (actually arbitrary expressions).
- Insert a strategically placed (debug) call and then call the
  function.  If/when the debug call is executed, you are dropped into
  the debugger and you can then evaluate arbitrary expressions.

   </pre>
   </content>
</entry>
<entry>
   <title>gnuplot-variable-expansion</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-30-gnuplot-variable-expansion.html"/>
   <updated>2009-11-30:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-30-gnuplot-variable-expansion.html</id>
   <content type="html">
   <pre>
** gnuplot variable expansion
   :PROPERTIES:
   :DATE:     2009-11-30
   :END:

#+source: simple-function
#+begin_src emacs-lisp
  "sin(x)"
#+end_src

#+begin_src gnuplot :var fun=simple-function
  plot $fun
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>sql-exports-to-latex</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-11-30-sql-exports-to-latex.html"/>
   <updated>2009-11-30:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-11-30-sql-exports-to-latex.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** sql exports to latex</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-30</span>
<span class="org-special-keyword">   :END:</span>
example from email list
<span class="org-level-3">*** ECM</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2009-11-30</span>
<span class="org-special-keyword">    :END:</span>

   - faire un script Bash (et <span class="org-code">=isql=</span>) envoyant un <span class="italic">/listing/</span> de stagiaires;

<span class="org-meta-line">#+srcname: envoi-stg
</span><span class="org-block-begin-line">   #+begin_src sql
</span>       DECLARE @dateFmtStyleIn int; SET @dateFmtStyleIn = 120 <span class="comment">-- ODBC canonical
</span>       DECLARE @dateFmtStyleOut int; SET @dateFmtStyleOut = 103 <span class="comment">-- French dd/mm/yyyy
</span>
       DECLARE @firstDayOfThisMonth smalldatetime
       SET @firstDayOfThisMonth = CONVERT(smalldatetime,
                                          CAST(YEAR(GETDATE()) AS char(4)) + <span class="string">'-'</span>
                                          + CAST(MONTH(GETDATE()) AS char(2)) + <span class="string">'-'</span>
                                          + <span class="string">'01'</span> + <span class="string">' 00:00:00'</span>,
                                          @dateFmtStyleIn)

       DECLARE @now smalldatetime
       SET @now = CONVERT(smalldatetime,
                          CAST(YEAR(GETDATE()) AS char(4)) + <span class="string">'-'</span>
                          + CAST(MONTH(GETDATE()) AS char(2)) + <span class="string">'-'</span>
                          + CAST(DAY(GETDATE()) AS char(2)) + <span class="string">' '</span>
                          + CAST(DATEPART(hh, GETDATE()) AS char(2)) + <span class="string">':'</span>
                          + CAST(DATEPART(mi, GETDATE()) AS char(2)) + <span class="string">':'</span>
                          + <span class="string">'00',</span>
                          @dateFmtStyleIn)

       SELECT pfiID
       FROM dossier
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>eval-buffer</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-04-eval-buffer.html"/>
   <updated>2009-12-04:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-04-eval-buffer.html</id>
   <content type="html">
   <pre>
** eval-buffer
   :PROPERTIES:
   :DATE:     2009-12-04
   :END:
#+begin_src emacs-lisp
  (+ 1 2)
#+end_src

#+results:
: 3

#+begin_src emacs-lisp
  (+ 3 4)
#+end_src

#+results:
: 7

   </pre>
   </content>
</entry>
<entry>
   <title>quoted-session-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-04-quoted-session-name.html"/>
   <updated>2009-12-04:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-04-quoted-session-name.html</id>
   <content type="html">
   <pre>
** quoted session name
   :PROPERTIES:
   :DATE:     2009-12-04
   :END:

#+begin_src sh :session "eric"
  echo 'name-me'
#+end_src

#+results:
: name-me

   </pre>
   </content>
</entry>
<entry>
   <title>looking-at-double-quotes</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-18-looking-at-double-quotes.html"/>
   <updated>2009-12-18:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-18-looking-at-double-quotes.html</id>
   <content type="html">
   <pre>
** looking at double quotes
   :PROPERTIES:
   :DATE:     2009-12-18
   :END:

#+tblname: double-quote-test-input
| test | this | 8 | 9 |

#+srcname: double-quote-test-output
#+begin_src python :var data=double-quote-test-input
  return data
#+end_src

#+results: double-quote-test-output
| test | this | 8 | 9 |

   </pre>
   </content>
</entry>
<entry>
   <title>no-noweb-by-default</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-18-no-noweb-by-default.html"/>
   <updated>2009-12-18:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-18-no-noweb-by-default.html</id>
   <content type="html">
   <pre>
** no noweb by default
   :PROPERTIES:
   :DATE:     2009-12-18
   :END:

#+srcname: sample
#+begin_src emacs-lisp 
  (message "sample")
#+end_src

#+begin_src emacs-lisp :noweb no
  &lt;&lt;sample&gt;&gt;
#+end_src

#+results:
: sample

   </pre>
   </content>
</entry>
<entry>
   <title>exporting-and-caching</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-23-exporting-and-caching.html"/>
   <updated>2009-12-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-23-exporting-and-caching.html</id>
   <content type="html">
   <pre>
** exporting and caching
   :PROPERTIES:
   :DATE:     2009-12-23
   :END:
#+begin_src ditaa :file data/example.png :exports none
    +------------------+
    |  ditaa example   |
    |                  |
    |                  |
    +------------------+
#+end_src

#+results:
[[file:data/example.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>exporting-org-source</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2009-12-23-exporting-org-source.html"/>
   <updated>2009-12-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2009-12-23-exporting-org-source.html</id>
   <content type="html">
   <pre>
** exporting org-source
   :PROPERTIES:
   :DATE:     2009-12-23
   :END:

#+begin_src org
  ,lets see how this org-mode code exports to html
  
  ,is this [[link]] blue?
  
  ,#+begin_src emacs-lisp
  ,  (+ 1 2)
  ,#+end_src
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>fancier-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-01-05-fancier-export.html"/>
   <updated>2010-01-05:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-01-05-fancier-export.html</id>
   <content type="html">
   <pre>
** fancier export
   :PROPERTIES:
   :DATE:     2010-01-05
   :END:

#+source: square
#+begin_src emacs-lisp :var input=1
  (* input input)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>links</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-01-06-links.html"/>
   <updated>2010-01-06:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-01-06-links.html</id>
   <content type="html">
   <pre>
** links
   :PROPERTIES:
   :DATE:     2010-01-06
   :END:

can LaTeX link itself to the middle of a paragraph with a simple
inline link like &lt;&lt;keystone&gt;&gt; if not then we would probably need to
wrap source-code blocks in figures to make them referable.

how about a link back to [[keystone]]

The above appears to work in LaTeX, but not in HTML.

   </pre>
   </content>
</entry>
<entry>
   <title>load-to-session</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-01-11-load-to-session.html"/>
   <updated>2010-01-11:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-01-11-load-to-session.html</id>
   <content type="html">
   <pre>
** load to session
   :PROPERTIES:
   :DATE:     2010-01-11
   :END:
#+begin_src clojure :session asm-gp
  (in-ns 'asm-gp)
#+end_src

#+begin_src ruby :session
  puts :eric
#+end_src

#+begin_src python :session
  5 + 1 
#+end_src

#+begin_src R :session
  6 + 1
#+end_src

#+begin_src sh :session
  date
#+end_src

#+begin_src ocaml :session
  eric
#+end_src

#+begin_src gnuplot :session
  plot sin(x)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>babel-block-overwrite</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-01-18-babel-block-overwrite.html"/>
   <updated>2010-01-18:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-01-18-babel-block-overwrite.html</id>
   <content type="html">
   <pre>
** babel block overwrite
   :PROPERTIES:
   :DATE:     2010-01-18
   :END:

The first block overwrites
#+begin_src clojure
  (def overwriter "I'll show up everywhere")
#+end_src

this second block
#+begin_src diff
  3719d3718
  &lt;       movl    $1024, 8(%esp)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>ditaa-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-03-ditaa-blocks.html"/>
   <updated>2010-02-03:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-03-ditaa-blocks.html</id>
   <content type="html">
   <pre>
** ditaa blocks
   :PROPERTIES:
   :DATE:     2010-02-03
   :END:

#+begin_src ditaa :file communication.png :cache yes
  -------------
#+end_src

#+results[4fbfc78b37abd8a788958d28a7335445e6042c96]:
[[file:communication.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>exporting-to-a-file</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-03-exporting-to-a-file.html"/>
   <updated>2010-02-03:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-03-exporting-to-a-file.html</id>
   <content type="html">
   <pre>
** exporting to a file
   :PROPERTIES:
   :EXPORT_FILE_NAME: simple
   :EXPORT_TITLE: testing file export
   :DATE:     2010-02-03
   :END:

this is the contents

and a block
#+begin_src clojure
  (println "is a nice lisp")
#+end_src

ah, it works!

   </pre>
   </content>
</entry>
<entry>
   <title>tangling-without-comments-and-shebang</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-05-tangling-without-comments-and-shebang.html"/>
   <updated>2010-02-05:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-05-tangling-without-comments-and-shebang.html</id>
   <content type="html">
   <pre>
** tangling w/o comments and shebang
   :PROPERTIES:
   :tangle:   yes
   :DATE:     2010-02-05
   :END:

#+begin_src emacs-lisp :comments no :shebang (identity my-shebang)
  (message "I should have no comments")
#+end_src

#+begin_src emacs-lisp :comments no
  (setq my-shebang "foo")
#+end_src

#+results:
: foo

#+begin_src ruby :shebang #!/usr/bin/ruby
  puts :nonstandard_shebang
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>tables-to-shell-scripts-ideas</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-06-tables-to-shell-scripts-ideas.html"/>
   <updated>2010-02-06:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-06-tables-to-shell-scripts-ideas.html</id>
   <content type="html">
   <pre>
** tables to shell scripts ideas
   :PROPERTIES:
   :DATE:     2010-02-06
   :END:

#+tblname: sec
| Hello | World |


1) allowing the user to specify a separator with a header argument as
   follows
   #+begin_src sh :var table=sec :separator ,
     cat &lt;&lt;EOF
     $table
     EOF
   #+end_src
   
   which would result in something like

   : "Hello, World"

2) writing the table to a tab or comma separated file and then
   replacing =$table= in the source block body with the path to the
   file name, s.t. something like
   
   #+begin_src sh :var table=data
     wc $table
   #+end_src

   would return reasonable results

   </pre>
   </content>
</entry>
<entry>
   <title>short-shell-test</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-07-short-shell-test.html"/>
   <updated>2010-02-07:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-07-short-shell-test.html</id>
   <content type="html">
   <pre>
** short shell test
   :PROPERTIES:
   :DATE:     2010-02-07
   :END:

#+begin_src sh
  date
#+end_src

#+results:
: Sun Feb  7 10:17:44 MST 2010

#+tblname: fibs
| 1 | 1 |
| 2 | 1 |
| 3 | 2 |
| 4 | 3 |
| 5 | 5 |
| 6 | 8 |

#+begin_src sh :var table=fibs
  echo "$table" |wc
#+end_src

#+results:
: 6      12      24

#+begin_src sh :var table=fibs
  echo "$table"
#+end_src

#+results:
| 1 | 1 |
| 2 | 1 |
| 3 | 2 |
| 4 | 3 |
| 5 | 5 |
| 6 | 8 |

#+begin_src sh :var table=fibs :separator --
  echo "$table" | head -1
#+end_src

#+results:
: 1--1

   </pre>
   </content>
</entry>
<entry>
   <title>looking-at-source-name-exports</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-09-looking-at-source-name-exports.html"/>
   <updated>2010-02-09:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-09-looking-at-source-name-exports.html</id>
   <content type="html">
   <pre>
** looking at source name exports
   :PROPERTIES:
   :DATE:     2010-02-09
   :END:

#+source: fibonacci
#+begin_src emacs-lisp :var input=0
  (defun fib (n)
    (if (&gt; n 1)
        (+ (fib (- n 1)) (fib (- n 2)))
        1))
  (fib input)
#+end_src

#+results: fibonacci
: 1

now applying our Fibonacci function

#+call: fibonacci(input=5)

   </pre>
   </content>
</entry>
<entry>
   <title>list-index-with-function-style-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-14-list-index-with-function-style-name.html"/>
   <updated>2010-02-14:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-14-list-index-with-function-style-name.html</id>
   <content type="html">
   <pre>
** list index w/function style name
   :PROPERTIES:
   :DATE:     2010-02-14
   :END:

#+results: function-style-index
| 0 |
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |
| 6 |
| 7 |
| 8 |
| 9 |

#+srcname: function-style-indexing(data=function-style-index[1:4,0])
#+begin_src emacs-lisp
  (message "%S" data)
#+end_src

#+results: function-style-indexing
: ((1) (2) (3) (4))

   </pre>
   </content>
</entry>
<entry>
   <title>haskell-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-15-haskell-variables.html"/>
   <updated>2010-02-15:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-15-haskell-variables.html</id>
   <content type="html">
   <pre>
** haskell variables
   :PROPERTIES:
   :DATE:     2010-02-15
   :END:

playing with Haskell

#+results: haskell-stuff
: 9

#+begin_src haskell :var num=haskell-stuff
  num + 1
#+end_src

#+begin_src ruby :var num=haskell-stuff
  num + 1
#+end_src

#+results:
: 10

   </pre>
   </content>
</entry>
<entry>
   <title>results-lines-for-function-calls</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-15-results-lines-for-function-calls.html"/>
   <updated>2010-02-15:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-15-results-lines-for-function-calls.html</id>
   <content type="html">
   <pre>
** results lines for function calls
   :PROPERTIES:
   :DATE:     2010-02-15
   :END:

#+call: fibonacci(input=5) :resname eric

#+results:
: 8

#+begin_src emacs-lisp :var fib=fibonacci(input=5)
  (message "fib(5)=%d" fib)
#+end_src

#+results:
: fib(5)=8

   </pre>
   </content>
</entry>
<entry>
   <title>variables-into-shell-scripts</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-02-23-variables-into-shell-scripts.html"/>
   <updated>2010-02-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-02-23-variables-into-shell-scripts.html</id>
   <content type="html">
   <pre>
** variables into shell scripts
   :PROPERTIES:
   :DATE:     2010-02-23
   :END:
#+results: into-shell-scripts
| username | guest   |
| password | nothing |

#+begin_src sh :var username=into-shell-scripts[0,0] :var password=into-shell-scripts[1,1] :results output
  echo "$username -p $password"
#+end_src

#+results:
: username -p nothing

#+results: number-into-shell
: 9

#+begin_src sh :var num=number-into-shell
  for i in `seq $num`; do
      echo $i
  done
#+end_src

#+results:
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |
| 6 |
| 7 |
| 8 |
| 9 |

   </pre>
   </content>
</entry>
<entry>
   <title>access-to-variables-set-in-property-drawers</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-03-22-access-to-variables-set-in-property-drawers.html"/>
   <updated>2010-03-22:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-03-22-access-to-variables-set-in-property-drawers.html</id>
   <content type="html">
   <pre>
** access to variables set in property drawers
   :PROPERTIES:
   :special:  89
   :text: schulte
   :DATE:     2010-03-22
   :END:

: "(org-entry-get nil "special" t)"

#+begin_src emacs-lisp :var special=(string-to-number (org-entry-get nil "special" t))
  (+ special 1)
#+end_src

#+results:
: 90

#+begin_src emacs-lisp :var special=(org-entry-get nil "text" t)
  special  
#+end_src

#+results:
: schulte

   </pre>
   </content>
</entry>
<entry>
   <title>latex-attributes</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-03-23-latex-attributes.html"/>
   <updated>2010-03-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-03-23-latex-attributes.html</id>
   <content type="html">
   <pre>
** latex attributes
   :PROPERTIES:
   :DATE:     2010-03-23
   :END:

#+ATTR_LaTeX: width=0.38\textwidth wrap placement={r}{0.4\textwidth}
#+begin_src ditaa :file=scrap.png
  +---------------------------+
  |                           |
  |       latex               |
  |                           |
  |      +------------+       |
  |      |            |       |
  |      |            |       |
  |      |       cBLU |       |
  |      +------------+       |
  |                      cPNK |
  +---------------------------+
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>tangling-and-variable-resolution</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-03-31-tangling-and-variable-resolution.html"/>
   <updated>2010-03-31:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-03-31-tangling-and-variable-resolution.html</id>
   <content type="html">
   <pre>
** tangling and variable resolution
  :PROPERTIES:
  :ID:       18b4f1be-bb1d-49bc-a651-c97406a35bdd
  :tangle:   yes
  :DATE:     2010-03-31
  :END:

#+source: A
#+begin_src emacs-lisp :eval no :expand yes :var id=(org-entry-get nil "ID" t) :var two=2
  (concat "This is the entry ID: " id)
#+end_src

#+results: A
: This is the entry ID: 18b4f1be-bb1d-49bc-a651-c97406a35bdd

   </pre>
   </content>
</entry>
<entry>
   <title>evaluate-references</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-09-evaluate-references.html"/>
   <updated>2010-04-09:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-09-evaluate-references.html</id>
   <content type="html">
   <pre>
** evaluate references
   :PROPERTIES:
   :DATE:     2010-04-09
   :END:

#+begin_src emacs-lisp :var var=`(+ 9 ,(- 19 7)) :tangle yes
  (message "var is %S" var)
#+end_src

#+begin_src emacs-lisp
  (+ 1 2)
#+end_src

#+results:
: 3

#+begin_src ruby
  + 1 2
#+end_src

#+results:
: nil

   </pre>
   </content>
</entry>
<entry>
   <title>hline-processing</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-12-hline-processing.html"/>
   <updated>2010-04-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-12-hline-processing.html</id>
   <content type="html">
   <pre>
** hline processing
   :PROPERTIES:
   :DATE:     2010-04-12
   :END:
#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+tblname: less-cols
| 1 |
|---|
| 2 |
| 3 |

#+tblname: less-cols2
| 1 | 2 | 3 |

#+begin_src emacs-lisp :var tab=many-cols
  (message "%S" tab)
  ;; (remove 'hline tab)
  ;; (flet ((rem-hline (el)
  ;;                   (if (listp el)
  ;;                       (remove nil (mapcar #'rem-hline el))
  ;;                     (if (equal 'hline el) nil el))))
  ;;   (rem-hline tab))
#+end_src

#+begin_src ruby :var tab=less-cols
  tab
#+end_src

#+results:
| 1 |
|---|
| 2 |
| 3 |

#+begin_src ruby :var one=2
  1 + 2
#+end_src

#+results:
: 3

#+begin_src python :var tab=less-cols
  return tab
#+end_src

#+results:
| 1 |
|---|
| 2 |
| 3 |

#+begin_src ruby :var tab=less-cols :colnames no
  tab
#+end_src

#+results:
| 1 |
| 2 |
| 3 |

#+begin_src emacs-lisp :var tab=row-and-col-names
   (message "%S" tab)
#+end_src

#+results:
: (("" "c1" "c2" "c3") hline ("r1" 1 4 7) ("r2" 2 5 8) ("r3" 3 6 9))

#+tblname: row-and-col-names
|    | c1 | c2 | c3 |
|----+----+----+----|
| r1 |  1 |  4 |  7 |
| r2 |  2 |  5 |  8 |
| r3 |  3 |  6 |  9 |

functions
#+begin_src emacs-lisp
  (defun org-babel-del-hlines (table)
    "Remove all 'hlines from TABLE."
    (remove 'hline table))
  
  (defun org-babel-get-colnames (table)
    "Return a cons cell, the `car' of which contains the TABLE
        less colnames, and the `cdr' of which contains a list of the
        column names"
    (if (equal 'hline (second table))
        (cons (cddr table) (car table))
      table))
    
  (defun org-babel-get-rownames (table)
    "Return a cons cell, the `car' of which contains the TABLE less
     colnames, and the `cdr' of which contains a list of the column
     names.  Note: this function removes any hlines in TABLE"
    (flet ((trans (table) (apply #'mapcar* #'list table)))
      (let ((table (trans (remove 'hline table))))
        (cons (cdr table) (car table)))))
  
  (defun org-babel-put-colnames (table colnames)
    "Add COLNAMES to TABLE if they exist."
    (if colnames (apply 'list colnames 'hline table) table))
  
  (defun org-babel-put-rownames (table rownames)
    "Add ROWNAMES to TABLE if they exist."
    (if rownames
        (mapcar (lambda (row)
                  (if (listp row)
                      (cons (or (pop rownames) "") row)
                    row)) table)
      table))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>test-gnuplot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-17-test-gnuplot.html"/>
   <updated>2010-04-17:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-17-test-gnuplot.html</id>
   <content type="html">
   <pre>
** test gnuplot
   :PROPERTIES:
   :DATE:     2010-04-17
   :END:

#+begin_src gnuplot
  plot sin(x), x+5
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>colnames-mismatched-sizes</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-23-colnames-mismatched-sizes.html"/>
   <updated>2010-04-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-23-colnames-mismatched-sizes.html</id>
   <content type="html">
   <pre>
** colnames mismatched sizes
   :PROPERTIES:
   :DATE:     2010-04-23
   :END:
#+tblname: mismatch-colnames
| a |  b |
|---+----|
| 1 |  8 |
| 2 |  9 |
| 3 | 10 |
| 4 | 11 |

#+begin_src python :var tab=mismatch-colnames
  return [[1, 2, 3]]
#+end_src

#+results:
| 1 | 2 | 3 |

#+begin_src python :var tab=mismatch-colnames
  return [[1, 2]]
#+end_src

#+results:
| a | b |
|---+---|
| 1 | 2 |

#+begin_src python :var tab=mismatch-colnames :colnames yes
  return [1,2]
#+end_src

#+results:
| 1 | 2 |

   </pre>
   </content>
</entry>
<entry>
   <title>variable-indexing</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-23-variable-indexing.html"/>
   <updated>2010-04-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-23-variable-indexing.html</id>
   <content type="html">
   <pre>
** variable indexing
   :PROPERTIES:
   :DATE:     2010-04-23
   :END:
#+TBLNAME: MyTable
 |   X |  Y |
 |-----+----|
 |   0 |  0 |
 |   1 |  1 |
 |   2 |  4 |
 |   3 |  9 |
 |   4 | 16 |
 |   5 | 25 |
 |-----+----|
 | Sum | 55 |
 #+TBLFM: $2=$1*$1::@8$2=vsum(@2..@-1)

#+begin_src python :var sum=MyTable[2:7,1] :exports none
   return sum
#+end_src

#+results:
| 0 | 1 | 4 | 9 | 16 | 25 |

#+begin_src python :var sum=MyTable[9,1] :exports none
   return sum
#+end_src

#+results:
: 55

#+begin_src gnuplot :var data=MyTable[1:-2] :var sum=MyTable[7,1]
:results silent :exports none
  reset
  set label "Sum: %.0f",sum at graph 0.03, graph 0.93
  plot data with linespoints
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>tangling-org</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-27-tangling-org.html"/>
   <updated>2010-04-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-27-tangling-org.html</id>
   <content type="html">
   <pre>
** tangling org
   :PROPERTIES:
   :DATE:     2010-04-27
   :END:

#+begin_src org :tangle ~/Desktop/test.org
  ,* first
  ,| eric   | me     |
  ,| patton | my dog |
  
  ,* second
  
  ,some more stuff...
  
  ,#+HTML: &lt;b&gt;I bet this is quoted&lt;/b&gt;
#+end_src

#+begin_src ruby :tangle ~/Desktop/test.rb
  # this is a comment
  eric.map{|l| puts l}
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>lisps-not-fully-evald</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-04-30-lisps-not-fully-evald.html"/>
   <updated>2010-04-30:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-04-30-lisps-not-fully-evald.html</id>
   <content type="html">
   <pre>
** lisps not fully eval'd
   :PROPERTIES:
   :DATE:     2010-04-30
   :END:

#+begin_src emacs-lisp
  (message "one")
  (message "two")
#+end_src

#+results:
: two

#+begin_src clojure :session :default
  (println "one")
  (println "two")
  (+ 1 2)
#+end_src

#+results:
: 3

   </pre>
   </content>
</entry>
<entry>
   <title>colnames</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-05-04-colnames.html"/>
   <updated>2010-05-04:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-05-04-colnames.html</id>
   <content type="html">
   <pre>
** colnames
   :PROPERTIES:
   :DATE:     2010-05-04
   :END:

#+tblname: A
| a | b | c |
|---+---+---|
| d | e | f |
| g | h | i |

#+begin_src python :var tab=A :colnames yes
return [[val + '*' for val in row] for row in tab]
#+end_src

#+results:
| a  | b  | c  |
|----+----+----|
| d* | e* | f* |
| g* | h* | i* |

#+tblname: A
| a | b | c |
| d | e | f |
| g | h | i |

#+begin_src ruby :var tab=A :colnames yes
tab.map{|r| r.map{|e| e+"*"} }
#+end_src

#+results:
| a  | b  | c  |
|----+----+----|
| d* | e* | f* |
| g* | h* | i* |

   </pre>
   </content>
</entry>
<entry>
   <title>empty-code-blocks----and-latex-vs.-latex</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-05-26-empty-code-blocks----and-latex-vs.-latex.html"/>
   <updated>2010-05-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-05-26-empty-code-blocks----and-latex-vs.-latex.html</id>
   <content type="html">
   <pre>
** empty code blocks -- and latex vs. LaTeX
   :PROPERTIES:
   :DATE:     2010-05-26
   :END:
eric
#+begin_src latex
  
#+end_src

michael
#+begin_src LaTeX
  
#+end_src

schulte
#+begin_src emacs-lisp
  (message "error")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>visibility-affecting-execution</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-05-27-visibility-affecting-execution.html"/>
   <updated>2010-05-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-05-27-visibility-affecting-execution.html</id>
   <content type="html">
   <pre>
** visibility affecting execution
   :PROPERTIES:
   :DATE:     2010-05-27
   :END:

*** folding
    :PROPERTIES:
    :DATE:     2010-05-27
    :END:
lets test folding

**** folded
     :PROPERTIES:
     :DATE:     2010-05-27
     :END:
#+begin_src emacs-lisp
  (message "folded1")
#+end_src

#+results:
: folded1

#+begin_src emacs-lisp
  (message "folded2")
#+end_src

#+results:
: folded2
**** unfolded
     :PROPERTIES:
     :DATE:     2010-05-27
     :END:
#+begin_src emacs-lisp
  (message "unfolded1")
#+end_src

#+results:
: unfolded1
#+begin_src emacs-lisp
  (message "unfolded2")
#+end_src

#+results:
: unfolded2

   </pre>
   </content>
</entry>
<entry>
   <title>appending-tangle</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-05-28-appending-tangle.html"/>
   <updated>2010-05-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-05-28-appending-tangle.html</id>
   <content type="html">
   <pre>
** appending tangle
   :PROPERTIES:
   :tangle:   appended.el
   :DATE:     2010-05-28
   :END:
append all these block

#+begin_src emacs-lisp
  (message "block %d" 1)
#+end_src

#+begin_src emacs-lisp
  (message "block %d" 2)
#+end_src

#+begin_src emacs-lisp
  (message "block %d" 3)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>adding-file-names-to-literal-values-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-01-adding-file-names-to-literal-values-on-export.html"/>
   <updated>2010-06-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-01-adding-file-names-to-literal-values-on-export.html</id>
   <content type="html">
   <pre>
** adding file names to literal values on export
   :PROPERTIES:
   :DATE:     2010-06-01
   :END:

#+results: three
: 9

#+begin_src R :var num=three :exports results
runif(n=num, min=0, max=1)
#+end_src

#+begin_src R :var num=3 :exports results
runif(n=num, min=0, max=1)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>inline-expressions</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-06-inline-expressions.html"/>
   <updated>2010-06-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-06-inline-expressions.html</id>
   <content type="html">
   <pre>
** inline expressions
   :PROPERTIES:
   :session:  'default
   :DATE:     2010-06-06
   :END:

#+begin_src R :exports code :results silent
  x&lt;-4
#+end_src

the sum of 1 and x is equal to src_R{x+1}, now I'll sneakily reset
this value in a hidden inline block src_R[:exports none]{x&lt;-2}, so
it's value is now src_R{x}.

   </pre>
   </content>
</entry>
<entry>
   <title>simple-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-06-simple-table.html"/>
   <updated>2010-06-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-06-simple-table.html</id>
   <content type="html">
   <pre>
** simple table
   :PROPERTIES:
   :DATE:     2010-06-06
   :END:
#+begin_src emacs-lisp
  '((1 2 3) (4 5 6) (7 8 900))
#+end_src

#+results:
| 1 | 2 |   3 |
| 4 | 5 |   6 |
| 7 | 8 | 900 |

   </pre>
   </content>
</entry>
<entry>
   <title>commas-on-tangling-test</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-commas-on-tangling-test.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-commas-on-tangling-test.html</id>
   <content type="html">
   <pre>
** commas on tangling test
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:
test comma protection on tangling

#+begin_src emacs-lisp :results silent
  (org-babel-add-interpreter "org")
  (add-to-list 'org-babel-tangle-langs '("org" "org"))
#+end_src

#+begin_src org :tangle commas.org
  ,* org-mode
  ,  :PROPERTIES:
  ,  :CUSTOM_ID: comma-protect
  ,  :END:
  
  ,#+begin_src emacs-lisp
  ,  protected?
  ,#+end_src
#+end_src

#+begin_example 
  ,* this should be
  # commented out
  
  and maybe not this...
#+end_example

   </pre>
   </content>
</entry>
<entry>
   <title>executing-emacs-lisp-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-executing-emacs-lisp-on-export.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-executing-emacs-lisp-on-export.html</id>
   <content type="html">
   <pre>
** executing emacs-lisp on export
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

#+begin_src emacs-lisp
  (error "eric")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>export-with-existing-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-export-with-existing-results.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-export-with-existing-results.html</id>
   <content type="html">
   <pre>
** export with existing results
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

#+begin_src emacs-lisp :exports none :results silent
  '((1 2) (3 4))
#+end_src

#+results:
| 1 | 2 |
| 3 | 4 |

#+begin_src ditaa :file /tmp/eric.png :exports none :results silent
    +---------------+
    |               |
    |               |
    |               |     +-----------------+
    |    Eric       |     |                 |
    |               |     |    Schulte      |
    |               |     |                 |
    |               |     +-----------------+
    +---------------+
#+end_src

#+results:
[[file:/tmp/eric.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>indented-source-names</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-indented-source-names.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-indented-source-names.html</id>
   <content type="html">
   <pre>
** indented source names
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

   #+srcname: i-am-indented
   #+begin_src emacs-lisp 
     (message "i am indented")
   #+end_src

#+results: i-am-indented
: i am indented

#+begin_src emacs-lisp :var output=i-am-indented
  (length output)
#+end_src

#+results:
: 13

  #+results:
  : eric

   </pre>
   </content>
</entry>
<entry>
   <title>inhibiting-evaluation-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-inhibiting-evaluation-on-export.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-inhibiting-evaluation-on-export.html</id>
   <content type="html">
   <pre>
** inhibiting evaluation on export
   :PROPERTIES:
   :noeval:   don't do it
   :DATE:     2010-06-07
   :END:

#+begin_src clojure :session eric :exports none
  (+ 1 1 1 1)
  (error)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>non-empty-comint-prompt</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-non-empty-comint-prompt.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-non-empty-comint-prompt.html</id>
   <content type="html">
   <pre>
** non-empty comint prompt
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

#+begin_src ruby :session eric
  8 + 9
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>stripping-existing-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-stripping-existing-results.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-stripping-existing-results.html</id>
   <content type="html">
   <pre>
** stripping existing results
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:
#+results: trickily-located-somehwere-else
: I shouldn't be exported

Neither of the result strings for the following two code blocks should
be included in the export.  And only one of the bodies should be
included...

#+begin_src emacs-lisp :exports code
  (+ 1 1 1 1)
#+end_src

#+results:
: don't include me in the export!!!!!!!

#+srcname: trickily-located-somehwere-else
#+begin_src emacs-lisp :exports none
  (message "I shouldn't be exported")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>unwind-protect-with-narrowing</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-unwind-protect-with-narrowing.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-unwind-protect-with-narrowing.html</id>
   <content type="html">
   <pre>
** unwind-protect with narrowing
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

I'm not in the subtree

*** I'm in the subtree
    :PROPERTIES:
    :DATE:     2010-06-07
    :END:
#+begin_src emacs-lisp
  (+ 6 "I'm not a number!!")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>updating-results-in-situ</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-07-updating-results-in-situ.html"/>
   <updated>2010-06-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-07-updating-results-in-situ.html</id>
   <content type="html">
   <pre>
** updating results "in-situ"
   :PROPERTIES:
   :DATE:     2010-06-07
   :END:

#+results: in-situ
: update me in place please -- Mon Jun  7 16:44:44 2010
: update me in place please -- Mon Jun  7 16:44:43 2010
: update me in place please -- Mon Jun  7 16:44:42 2010
: update me in place please -- Mon Jun  7 16:44:37 2010
: update me in place please -- Mon Jun  7 16:42:14 2010
: update me in place please (at the bottom) -- Mon Jun  7 16:44:59 2010
: update me in place please (at the bottom) -- Mon Jun  7 16:45:00 2010
: update me in place please (at the bottom) -- Mon Jun  7 16:45:02 2010

the results should be *above* the block

#+srcname: in-situ
#+begin_src emacs-lisp :results prepend
  (format "update me in place please -- %s"
          (current-time-string))
#+end_src

#+srcname: in-situ
#+begin_src emacs-lisp :results append
  (format "update me in place please (at the bottom) -- %s"
          (current-time-string))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>not-expand-inlines-in-examples</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-08-not-expand-inlines-in-examples.html"/>
   <updated>2010-06-08:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-08-not-expand-inlines-in-examples.html</id>
   <content type="html">
   <pre>
** not expand inlines in examples
   :PROPERTIES:
   :DATE:     2010-06-08
   :END:

: src_emacs-lisp{(+ 1 2 3)}

#+begin_example 
  src_emacs-lisp{(+ 1 2 3)}
#+end_example

src_emacs-lisp{(+ 1 2 3)}

#+begin_example 
  src_emacs-lisp{(+ 1 2 3)}
#+end_example

   </pre>
   </content>
</entry>
<entry>
   <title>indented-source-code-blocks-and-indented-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-10-indented-source-code-blocks-and-indented-results.html"/>
   <updated>2010-06-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-10-indented-source-code-blocks-and-indented-results.html</id>
   <content type="html">
   <pre>
** indented source-code blocks and indented results
   :PROPERTIES:
   :DATE:     2010-06-10
   :END:

    #+source: time
    #+begin_src emacs-lisp :results append
      ;; (list (list (current-time-string)))
      (current-time-string)
    #+end_src

    #+results: time
    | 1 | 2 | 3 |


        #+call: time() :results prepend

        #+results: time()
        | 1 | 2 | 3 |
        : Thu Jun 10 14:13:21 2010
        : Thu Jun 10 14:13:21 2010
        : : Thu Jun 10 14:13:21 2010
        : : Thu Jun 10 14:13:21 2010
        : : Thu Jun 10 14:13:21 2010
        : nil
        : nil
        : Thu Jun 10 14:11:22 2010
        : Thu Jun 10 14:11:20 2010
        : nil
        : nil
        : Thu Jun 10 14:06:04 2010
        : Thu Jun 10 14:06:03 2010
        : Thu Jun 10 14:05:51 2010
        : Thu Jun 10 14:05:57 2010
        : Thu Jun 10 14:06:00 2010

   </pre>
   </content>
</entry>
<entry>
   <title>cant-open-indented-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-11-cant-open-indented-results.html"/>
   <updated>2010-06-11:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-11-cant-open-indented-results.html</id>
   <content type="html">
   <pre>
** can't open indented results
   :PROPERTIES:
   :DATE:     2010-06-11
   :END:

   #+begin_src latex :packages '(("" "tikz") ("active,tightpage" "preview")) :file recursion.pdf
     \begin{preview}
     \ovalbox{
     \begin{tikzpicture}
     \node{$n$}
       child {
         node{$\left(\frac{n}{2}\right)^2$}
           child{
             node{$\left(\frac{n}{4}\right)^2$}
             node{$\left(\frac{n}{4}\right)^2$}
           }
         }
       child{
         node{$\left(\frac{n}{2}\right)^2$}
         child{
           node{$\left(\frac{n}{4}\right)^2$}
           node{$\left(\frac{n}{4}\right)^2$}
         }
       };
     \end{tikzpicture}
     }
     \end{preview}
   #+end_src

   #+results:
   [[file:recursion.pdf]]

   </pre>
   </content>
</entry>
<entry>
   <title>exporting-with-call-lines</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-11-exporting-with-call-lines.html"/>
   <updated>2010-06-11:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-11-exporting-with-call-lines.html</id>
   <content type="html">
   <pre>
** exporting with call lines
   :PROPERTIES:
   :DATE:     2010-06-11
   :END:
#+source: rpn-to-alg(alg)
#+begin_src clojure :results output :var alg="00+"
  (def binary-operators '(\+ \- \* \/))
  (def unary-operators '(\s))
  (defn rpn-to-alg [chars stack]
    (if (&gt; (.size chars) 0)
      (let [el (first chars)]
        (if (some #{el} binary-operators)
          (rpn-to-alg (rest chars)
                      (cons
                       (apply str "(" (or (second stack) 1) " " el " " (or (first stack) 1) ")")
                       (rest (rest stack))))
          (if (some #{el} unary-operators)
            (rpn-to-alg (rest chars)
                        (cons
                         (apply str "(" el " " (or (first stack) 1) ")")
                         (rest (rest stack))))
            (rpn-to-alg (rest chars) (cons el stack)))))
      (first stack)))
  (println (apply str (rpn-to-alg (seq alg) '())))
#+end_src

#+results: distributed-best
: 73*x11/+4/++51xxx13*y/++6y5*6/6-+xx+*

#+call: rpn-to-alg(alg=distributed-best)
 
   </pre>
   </content>
</entry>
<entry>
   <title>simple-reference</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-13-simple-reference.html"/>
   <updated>2010-06-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-13-simple-reference.html</id>
   <content type="html">
   <pre>
** simple reference
   :PROPERTIES:
   :DATE:     2010-06-13
   :END:
#+tblname: table-the-first
| 1 | 2 | 3 |
| 4 | 5 | 6 |
| 7 | 8 | 9 |

#+begin_src emacs-lisp :var data=table-the-first[1,1]
  data
#+end_src

#+results:
: 5

   </pre>
   </content>
</entry>
<entry>
   <title>dont-eat-me!</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-15-dont-eat-me!.html"/>
   <updated>2010-06-15:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-15-dont-eat-me!.html</id>
   <content type="html">
   <pre>
** don't eat me!
   :PROPERTIES:
   :DATE:     2010-06-15
   :END:
1) a source block inside of an =enumerate=
   #+begin_src emacs-lisp :exports results
     (list (list "I'm hungry" "I'm hungry")
           (list "I'm hungry" "I'm hungry")
           (list "I'm hungry" "I'm hungry"))
   #+end_src

   #+results:
   | I'm hungry | I'm hungry |
   | I'm hungry | I'm hungry |
   | I'm hungry | I'm hungry |

   #+begin_src emacs-lisp
     (message "don't eat me")
   #+end_src

   can cause problems

2) source blocks should be able to be on adjacent lines

   </pre>
   </content>
</entry>
<entry>
   <title>comments-not-commented</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-16-comments-not-commented.html"/>
   <updated>2010-06-16:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-16-comments-not-commented.html</id>
   <content type="html">
   <pre>
** comments not commented
   :PROPERTIES:
   :DATE:     2010-06-16
   :END:

# $some stuff
# some more stuff$ -- I should be a comment line

1) a source block inside of an =enumerate=
   #+source: plotxy
   #+begin_src emacs-lisp :exports results
     (message "I think so")
   #+end_src
   #+begin_src emacs-lisp
     (message "don't eat me")
   #+end_src
   

   can cause problems

2) how about this one...
   </pre>
   </content>
</entry>
<entry>
   <title>foo-org</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-16-foo-org.html"/>
   <updated>2010-06-16:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-16-foo-org.html</id>
   <content type="html">
   <pre>
** foo org
   :PROPERTIES:
   :session:  *R*
   :DATE:     2010-06-16
   :END:
Figure \ref{fig:one} (p. \pageref{fig:one}) is produced by the following code
#+BEGIN_SRC R 
plot(x, y)
abline(out1)
#+END_SRC
Note that =x=, =y=, and =out1= are remembered from the preceding code
chunk.  We don't have to regenerate them.  All code chunks are part of
one R "session".
and more stuff here and then the results
#+attr_latex: width=0.8\textwidth,placement=[p]
#+label: fig:one
#+caption: Scatter Plot with Regression Line
[[file:fig1.pdf]]

   </pre>
   </content>
</entry>
<entry>
   <title>cache-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-17-cache-on-export.html"/>
   <updated>2010-06-17:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-17-cache-on-export.html</id>
   <content type="html">
   <pre>
** cache on export
   :PROPERTIES:
   :DATE:     2010-06-17
   :END:
do we export cached blocks

#+begin_src sh :cache yes :exports results
  date
#+end_src

#+results[06ed73c6d8d022cf9c323d92af885952865add17]:
: Thu Jun 17 07:35:19 PDT 2010

   </pre>
   </content>
</entry>
<entry>
   <title>tangling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-17-tangling.html"/>
   <updated>2010-06-17:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-17-tangling.html</id>
   <content type="html">
   <pre>
** tangling
   :PROPERTIES:
   :DATE:     2010-06-17
   :END:

#+begin_src sh :shebang #!/bin/sh :tangle yes
  date
#+end_src

#+begin_src sh :shebang #!/bin/bash :tangle whoisme :exports both
  echo $USER
#+end_src

#+begin_src emacs-lisp :tangle yes :comments yes
  (message "BAM")
#+end_src

#+begin_src fortran :exports both
  1+8
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>multiple-evals-for-refs</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-25-multiple-evals-for-refs.html"/>
   <updated>2010-06-25:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-25-multiple-evals-for-refs.html</id>
   <content type="html">
   <pre>
** multiple evals for refs
   :PROPERTIES:
   :DATE:     2010-06-25
   :END:
#+begin_src emacs-lisp
  (setq counter 0)
#+end_src

#+results:
: 0

#+source: counter
#+begin_src emacs-lisp
  (setq counter (+ 1 counter))
  counter
#+end_src

#+begin_src emacs-lisp :var counter_val=counter
  counter_val
#+end_src

#+results:
: 3

   </pre>
   </content>
</entry>
<entry>
   <title>protecting-block-bodies</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-25-protecting-block-bodies.html"/>
   <updated>2010-06-25:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-25-protecting-block-bodies.html</id>
   <content type="html">
   <pre>
** protecting block bodies
   :PROPERTIES:
   :DATE:     2010-06-25
   :END:
neither of these work as expected

#+begin_src org
  ,#+TITLE: stuff
  
  ,#+begin_src emacs-lisp
  ,  (message "something")
  ,#+end_src
  
  ,more stuffs
  
  ,#+resname: something
  ,: value
  
  ,# and a comment
#+end_src

#+begin_src org
  ,* example org
  
  ,# this is a comment
  ,this is not a comment
#+end_src


#+begin_src org
  ,* escaped org-mode markup
  
  ,this should be exported as is
  ,#+results: escaping-example
  ,: 24
#+end_src


#+begin_html 
&lt;pre&gt;
#comment
#+end_src
&lt;/pre&gt;
#+end_html
final

   </pre>
   </content>
</entry>
<entry>
   <title>hlines-in-python</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-26-hlines-in-python.html"/>
   <updated>2010-06-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-26-hlines-in-python.html</id>
   <content type="html">
   <pre>
** hlines in python
   :PROPERTIES:
   :DATE:     2010-06-26
   :END:

#+tblname: many-cols
| a | b | c |
|---+---+---|
| d | e | f |
|---+---+---|
| g | h | i |

#+source: echo-table
#+begin_src python :var tab=many-cols :hlines yes :exports both :session
  return tab
#+end_src

#+begin_src emacs-lisp :var table=echo-table :exports none
  (butlast (apply #'append (mapcar (lambda (el) (list el 'hline)) table)))
#+end_src

#+call: echo-table(tab=many-cols)

#+begin_src python :exports results
  return [['foo', 'bar', 'baz'], ["a", "b", "None of the above"], ['1', 2, 3]]
#+end_src

#+begin_src emacs-lisp :exports results
  (message "Exist")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>possible-prefixes</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-26-possible-prefixes.html"/>
   <updated>2010-06-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-26-possible-prefixes.html</id>
   <content type="html">
   <pre>
** possible prefixes
   :PROPERTIES:
   :DATE:     2010-06-26
   :END:

| prefix   | remaining characters |
|----------+----------------------|
| ob-      |                    5 |
| org-b-   |                    2 |
| orgb-    |                    3 |
| org-bbl- |                    0 |
| bbl-     |                    4 |
| babel-   |                    2 |
#+TBLFM: $2='(sbe leftover (prefix $$1))

#+source: leftover
#+begin_src emacs-lisp :var prefix=""
  (-
   ;; length w/o .el
   (- 13 (length ".el"))
   ;; length of prefix
   (length prefix))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>complex</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-28-complex.html"/>
   <updated>2010-06-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-28-complex.html</id>
   <content type="html">
   <pre>
** complex
   :PROPERTIES:
   :DATE:     2010-06-28
   :END:
#+source: raw-data
#+begin_src sh :results scalar
  wget --quiet -qO- "http://ogdi.cloudapp.net/v1/dc/RecreationParks?format=json"
#+end_src

#+source: dc-parks
#+begin_src emacs-lisp :var keys='(ward area) :var data=raw-data
  (mapcar
    (lambda (lis) (mapcar (lambda (key) (cdr (assoc key lis))) keys))
    (cdr (car (with-temp-buffer
                (insert data) (goto-char (point-min))
                (json-read)))))
#+end_src

#+source: dc-parks-metric
#+begin_src ruby :var data=dc-parks
  data.map{|f| [f[0], 2.59 * f[1]]}
#+end_src

#+begin_src R :var parkData=dc-parks-metric :file parks.png :session *R*
  plot(parkData)
  title(main="Park size by Ward")
#+end_src

#+results:
[[file:parks.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>haskell-issues</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-28-haskell-issues.html"/>
   <updated>2010-06-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-28-haskell-issues.html</id>
   <content type="html">
   <pre>
** haskell issues
   :PROPERTIES:
   :DATE:     2010-06-28
   :END:

#+begin_src haskell
  length [1, 2]
#+end_src

#+results:
: 2

#+tblname: example-4-haskell
| 1 |
| 2 |
| 3 |
| 4 |
| 5 |
| 6 |
| 7 |

#+begin_src haskell :var this=example-4-haskell
  length this
#+end_src

#+results:
: 7

   </pre>
   </content>
</entry>
<entry>
   <title>table-label</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-28-table-label.html"/>
   <updated>2010-06-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-28-table-label.html</id>
   <content type="html">
   <pre>
** table-label
   :PROPERTIES:
   :DATE:     2010-06-28
   :END:
#+label: bam
| 1 |
| 2 |
| 3 |

   </pre>
   </content>
</entry>
<entry>
   <title>booktabs</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-29-booktabs.html"/>
   <updated>2010-06-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-29-booktabs.html</id>
   <content type="html">
   <pre>
** booktabs
   :PROPERTIES:
   :DATE:     2010-06-29
   :END:
#+tblname: months
| num | Abbrev. |
|-----+---------|
|   1 | Jan.    |
|   2 | Feb.    |
|   3 | Mar.    |

#+call: booktabs(table=months, align="r|l") :results latex :exports results

   </pre>
   </content>
</entry>
<entry>
   <title>captions</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-29-captions.html"/>
   <updated>2010-06-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-29-captions.html</id>
   <content type="html">
   <pre>
** captions
   :PROPERTIES:
   :DATE:     2010-06-29
   :END:

#+caption: I'm not removed from export
#+label: also-not-removed
| A | B |
| 1 | 2 |

   </pre>
   </content>
</entry>
<entry>
   <title>latex-literals-in-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-30-latex-literals-in-export.html"/>
   <updated>2010-06-30:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-30-latex-literals-in-export.html</id>
   <content type="html">
   <pre>
** latex literals in export
   :PROPERTIES:
   :DATE:     2010-06-30
   :END:

  #+ATTR_LaTeX: width=\textwidth
  [[./composite-pattern.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>table-comment-issue</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-06-30-table-comment-issue.html"/>
   <updated>2010-06-30:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-06-30-table-comment-issue.html</id>
   <content type="html">
   <pre>
** table comment issue
   :PROPERTIES:
   :DATE:     2010-06-30
   :END:
#+BEGIN_changemargin {-4.2cm}{0cm}
  #+TBLNAME: AutresFPNVE
  #+ATTR_LaTeX: align=lrrrrr
  |   |                                          | Montant total (\EUR) | Taux amort (\%) | Part pro. (\%) | D&#233;duc (\%) | NVE (\EUR) |
  |---+------------------------------------------+----------------------+-----------------+----------------+------------+------------|
  |   | Documentation et formation               |                51.05 |                 |                |            |       0.00 |
  |   | Communications GSM                       |               831.16 |             100 |             25 |        100 |     207.79 |
  |   | Internet (Dommel)                        |               167.88 |             100 |             33 |        100 |      55.40 |
  |   | Fournitures &#224; amortir (ordinateur + GSM) |               762.51 |              33 |             80 |        100 |     201.30 |
  |   | Restaurant                               |               304.70 |             100 |            100 |         69 |     210.24 |
  |---+------------------------------------------+----------------------+-----------------+----------------+------------+------------|
  |   | Total                                    |                      |                 |                |            |    1062.02 |
  | ^ |                                          |                      |                 |                |            |      Total |
  #+tblfm: $7=$3*$4*$5*$6/1000000;%.2f::@2$3=51.05::@3$3=9.00+184.88+51.22+201.82+45.67+69.03+62.93+54.16+38.87+39.77+36.35+37.46::@4$3=12*13.99::@6$3=146.50+158.20;%.2f::@7$7=vsum(@-I..@-II);%.2f
#+END_changemargin

save me!

#+begin_src org
  ,  #+TBLNAME: AutresFPNVE
  ,  #+ATTR_LaTeX: align=lrrrrr
  ,  |   |                                          | Montant total (\EUR) | Taux amort (\%) | Part pro. (\%) | D&#233;duc (\%) | NVE (\EUR) |
  ,  |---+------------------------------------------+----------------------+-----------------+----------------+------------+------------|
  ,  |   | Documentation et formation               |                51.05 |                 |                |            |       0.00 |
  ,  |   | Communications GSM                       |               831.16 |             100 |             25 |        100 |     207.79 |
  ,  |   | Internet (Dommel)                        |               167.88 |             100 |             33 |        100 |      55.40 |
  ,  |   | Fournitures &#224; amortir (ordinateur + GSM) |               762.51 |              33 |             80 |        100 |     201.30 |
  ,  |   | Restaurant                               |               304.70 |             100 |            100 |         69 |     210.24 |
  ,  |---+------------------------------------------+----------------------+-----------------+----------------+------------+------------|
  ,  |   | Total                                    |                      |                 |                |            |    1062.02 |
  ,  | ^ |                                          |                      |                 |                |            |      Total |
  ,  #+TBLFM: $7=$3*$4*$5*$6/1000000;%.2f::@2$3=51.05::@3$3=9.00+184.88+51.22+201.82+45.67+69.03+62.93+54.16+38.87+39.77+36.35+37.46::@4$3=12*13.99::@6$3=146.50+158.20;%.2f::@7$7=vsum(@-I..@-II);%.2f
#+end_src

#+begin_example 
#+tblname: example
| 1 | 2 |
#+end_example

   </pre>
   </content>
</entry>
<entry>
   <title>python-errors</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-04-python-errors.html"/>
   <updated>2010-07-04:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-04-python-errors.html</id>
   <content type="html">
   <pre>
** python errors
   :PROPERTIES:
   :DATE:     2010-07-04
   :END:
#+begin_src python :session :results value
  [1, [2], 3, 4]
#+end_src

#+results:
| 1 | (2) | 3 | 4 |

#+begin_src ruby :results output :session
  [1, 2, 3, 4, 6].map{|n| puts n}
#+end_src

#+results:
: 1
: 2
: 3
: 4
: 6

#+begin_src python :session :results output
  print 9
#+end_src

#+results: R-with-colnames
| one |
|-----|
| 1   |

#+begin_src R :results output
  "something"
#+end_src

#+results:
: [1] "something"

#+begin_src R :session *R* :results output
  1
  2
  3
  4
#+end_src

#+results:
: [1] 1
: [1] 2
: [1] 3
: [1] 4

#+begin_src perl :results output
  print "8\n";
  print "9\n";
#+end_src

#+results:
: 8
: 9

#+begin_src clojure
  (+ 8 7)
#+end_src

#+results:
: 15

#+begin_src clojure :session *clj*
  (println "eric")
#+end_src

#+results:
: nil

#+begin_src perl :results value
  8
#+end_src

#+results:
: 8

#+begin_src c++ :includes '(&lt;stdio.h&gt; &lt;math.h&gt; &lt;cstdlib&gt; &lt;time.h&gt;)
  printf("eric schulte\n");
#+end_src

#+results:
: eric schulte

#+begin_src sh
  echo 78
#+end_src

#+results:
: 78

   </pre>
   </content>
</entry>
<entry>
   <title>dot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-06-dot.html"/>
   <updated>2010-07-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-06-dot.html</id>
   <content type="html">
   <pre>
** dot
   :PROPERTIES:
   :DATE:     2010-07-06
   :END:
#+begin_src dot :file models.png :cmdline -Tpng
  digraph data_relationships {
    "data_requirement" [shape=Mrecord, label="{DataRequirement|description\lformat\l}"]
    "data_product" [shape=Mrecord, label="{DataProduct|name\lversion\lpoc\lformat\l}"]
    "data_requirement" -&gt; "data_product"
  }
#+end_src

#+results:
[[file:models.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>tom-found-a-bug</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-06-tom-found-a-bug.html"/>
   <updated>2010-07-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-06-tom-found-a-bug.html</id>
   <content type="html">
   <pre>
** Tom found a bug
   :PROPERTIES:
   :DATE:     2010-07-06
   :END:

#+begin_src emacs-lisp :tangle something.el
  (list 1 (+ 2 3))
#+end_src

#+results:
| 1 | 5 |

   </pre>
   </content>
</entry>
<entry>
   <title>scratch</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-08-scratch.html"/>
   <updated>2010-07-08:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-08-scratch.html</id>
   <content type="html">
   <pre>
** scratch
   :PROPERTIES:
   :DATE:     2010-07-08
   :END:

#+begin_src emacs-lisp :exports results
  (+ 1 1 1 1)
  (setq org-export-babel-evaluate t)
#+end_src

and now for src_emacs-lisp{87} an inline block

looking at paths
#+begin_src emacs-lisp
  (buffer-file-name)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>export-blocks-without-languages</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-09-export-blocks-without-languages.html"/>
   <updated>2010-07-09:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-09-export-blocks-without-languages.html</id>
   <content type="html">
   <pre>
** export blocks w/o languages
   :PROPERTIES:
   :DATE:     2010-07-09
   :END:
should raise an error

source
#+begin_src emacs-lisp
  ;; this is a comment
  (+ 1 1 1)
#+end_src

broken source
#+begin_src 
  (+ 2 2 2)
#+end_src

example
#+begin_example 
  this is exampled
#+end_example

#+begin_src ruby
  # this is the first
  [1, 2, 3, 4, 5].map{|r| r+1}
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>tangle-r-and-load</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-09-tangle-r-and-load.html"/>
   <updated>2010-07-09:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-09-tangle-r-and-load.html</id>
   <content type="html">
   <pre>
** tangle R and load
   :PROPERTIES:
   :tangle:   with-comments.r
   :comments: yes
   :DATE:     2010-07-09
   :END:

#+begin_src R :tangle no
  z &lt;- 0
#+end_src

#+begin_src R
  x &lt;- 8
#+end_src

#+begin_src R
  y &lt;- 9
#+end_src

#+srcname: i-have-a-name
#+begin_src R 
  x+y+z
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>example-without-source-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-12-example-without-source-name.html"/>
   <updated>2010-07-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-12-example-without-source-name.html</id>
   <content type="html">
   <pre>
** example w/o source name
   :PROPERTIES:
   :DATE:     2010-07-12
   :END:

delete emacs-lisp below for errors
#+begin_src emacs-lisp
  (* (+ 1 1 1) (+ 1 1 1) (+ 1 1 1) (+ 1 1 1) (+ 1 1 1) (+ 1 1 1) (+ 1 1 1))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>fixing-result-insertion</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-12-fixing-result-insertion.html"/>
   <updated>2010-07-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-12-fixing-result-insertion.html</id>
   <content type="html">
   <pre>
** fixing result insertion
   :PROPERTIES:
   :DATE:     2010-07-12
   :END:
needs to replace the results when there is a new hash

*** normal results
    :PROPERTIES:
    :DATE:     2010-07-12
    :END:
#+begin_src sh
  date
#+end_src

#+results:
: Mon Jul 12 22:18:16 PDT 2010

*** unnamed source block results
    :PROPERTIES:
    :DATE:     2010-07-12
    :END:
#+begin_src emacs-lisp :cache yes
  (+ 1 2 3 4)
#+end_src

#+results[16a776d6d139e1d39e99d736536a546df115c2dc]:
: 10

#+begin_src emacs-lisp :cache yes
  (list '(1 2 3) '(4 5 6))
#+end_src

#+results[53f489ed6977857b9945d79d06e575b2cbbebf11]:
| 1 | 2 | 3 |
| 4 | 5 | 6 |

*** named source block results
    :PROPERTIES:
    :DATE:     2010-07-12
    :END:

#+srcname: something-w-table
#+begin_src emacs-lisp
  (sleep-for 2)
  (list '(1 2 3) '(4 5 8))
#+end_src

#+source: something
#+begin_src emacs-lisp :cache yes
  (+ 1 2 3 4 8)
#+end_src

Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enimad
minim veniam, quis nostrud exercitation ullamco laboris nisi ut
aliquip ex ea commodo consequat. Duis aute irure dolor in
reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
culpa qui officia deserunt mollit anim id est laborum.

# something else
#+results[d053f6643d9dc52a0e804c15f2a762da73a00a07]: something
: 18

#+attr_latex: width=0.4\textwidth
#+results[5fac69648ab749ef9ee88ea65b3d49d93f3f6cc8]: something-w-table
| 1 | 2 | 3 |
| 4 | 5 | 8 |

   </pre>
   </content>
</entry>
<entry>
   <title>limited-precision</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-12-limited-precision.html"/>
   <updated>2010-07-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-12-limited-precision.html</id>
   <content type="html">
   <pre>
** limited precision
   :PROPERTIES:
   :DATE:     2010-07-12
   :END:

#+results: anova-example
| Effect | DFn | DFd |             SSn |              SSd |                F |                    p | p&lt;.05 |              pes |
|--------+-----+-----+-----------------+------------------+------------------+----------------------+-------+------------------|
| Days   |   9 | 153 | 166235.12250176 | 151101.038615303 | 18.7026979326383 | 8.99534541600196e-21 | *     | 0.52384550792003 |

#+begin_src emacs-lisp :var tab=anova-example :colnames yes :cache yes
  (mapcar
   (lambda (row)
     (mapcar
      (lambda (cell) (if (numberp cell) (format "%.4f" cell) cell))
      row))
   tab)
#+end_src

#+results[16ac354f1e7a65594bb59e252ab221e6a4b10f80]:
| Effect |    DFn |      DFd |         SSn |         SSd |       F |                    p | p&lt;.05 |    pes |
|--------+--------+----------+-------------+-------------+---------+----------------------+-------+--------|
| Days   | 9.0000 | 153.0000 | 166235.1225 | 151101.0386 | 18.7027 | 8.99534541600196e-21 | *     | 0.5238 |

   </pre>
   </content>
</entry>
<entry>
   <title>input-from-an-example-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-13-input-from-an-example-block.html"/>
   <updated>2010-07-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-13-input-from-an-example-block.html</id>
   <content type="html">
   <pre>
** input from an example block
   :PROPERTIES:
   :DATE:     2010-07-13
   :END:
#+results: lorem
#+begin_example 
  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
  eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
  enimad minim veniam, quis nostrud exercitation ullamco laboris nisi
  ut aliquip ex ea commodo consequat. Duis aute irure dolor in
  reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
  pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
  culpa qui officia deserunt mollit anim id est laborum.
#+end_example

#+begin_src emacs-lisp :var lorem=lorem
  (message "%d words in Lorem" (length (split-string lorem)))
#+end_src

#+results:
: 68 words in Lorem

#+results: 1D
| 1 |
| 2 |
| 3 |
| 4 |

#+begin_src emacs-lisp :var lst=1D[:,0]
  lst
#+end_src

#+results:
: 1

   </pre>
   </content>
</entry>
<entry>
   <title>palendromic-primes</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-20-palendromic-primes.html"/>
   <updated>2010-07-20:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-20-palendromic-primes.html</id>
   <content type="html">
   <pre>
** palendromic primes
   :PROPERTIES:
   :DATE:     2010-07-20
   :END:
Note that because Haskell is funny about what can be typed into the
interpreter, the following should be loaded with
=org-babel-load-in-session=.
#+begin_src haskell
  palendromic_primes = [x | x &lt;- [1..], prime x, palendrome x]
      where
        factors n = [x | x &lt;- [1..floor(sqrt(fromIntegral(n)))], n `mod` x == 0]
        prime n = factors n == [1]
        primes = [x | x &lt;- [2..], prime x]
        palendrome n = show(n) == reverse(show(n))
  
  palendromic_prime_distances = map (\(x,y)-&gt; y-x) neighbors
      where
        neighbors = (zip palendromic_primes (tail palendromic_primes))
#+end_src

#+source: palendromic_prime_distances
#+begin_src haskell
  take 180 (zip [1..] palendromic_prime_distances)
#+end_src

For high-quality png output from gnuplot, the following sequence of
graphing to a =.eps= file, and then converting to a =.png= can be
useful.
#+source: dist-graph
#+begin_src gnuplot :var data=palendromic_prime_distances :file pps.eps
  set term postscript landscape color enhanced
  set log y
  set title "distance between consecutive palendromic primes"
  plot "$data" with fs notitle
#+end_src

The =convert= command is part of the [[http://www.imagemagick.org/script/index.php][imagemagick]] suite.
#+begin_src sh :var input=dist-graph :results file
  convert -depth 300 -rotate 90 $input pps.png
  echo "pps.png"
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>caption-on-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-22-caption-on-code-block.html"/>
   <updated>2010-07-22:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-22-caption-on-code-block.html</id>
   <content type="html">
   <pre>
** caption on code block
   :PROPERTIES:
   :DATE:     2010-07-22
   :END:

#+caption: Examples of variable declaration.
#+label: sql-block
#+begin_src sql
SELECT 6*9;
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>colnames-to-specific-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-07-22-colnames-to-specific-variables.html"/>
   <updated>2010-07-22:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-07-22-colnames-to-specific-variables.html</id>
   <content type="html">
   <pre>
** colnames to specific variables
   :PROPERTIES:
   :DATE:     2010-07-22
   :END:

#+tblname: spec-colnames
| one | two | thee |
|-----+-----+------|
| 1   | 2   | 3    |

#+tblname: nospec-colnames
| three | two | one |
|-------+-----+-----|
|     3 |   2 |   1 |

#+begin_src python :var nospec=nospec-colnames :var spec=spec-colnames :colnames '(spec)
  return nospec
#+end_src

#+results:
| one   | two | thee |
|-------+-----+------|
| three | two | one  |
| 3     | 2   | 1    |

   </pre>
   </content>
</entry>
<entry>
   <title>comments-in-r-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-12-comments-in-r-blocks.html"/>
   <updated>2010-08-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-12-comments-in-r-blocks.html</id>
   <content type="html">
   <pre>
** comments in R blocks
   :PROPERTIES:
   :DATE:     2010-08-12
   :END:

#+begin_src R :session *R* :results output
  # this is a comment
  x &lt;- rnorm(1)
  # this is another comment
  x
#+end_src

#+results:
: 
: [1] 1.320853

   </pre>
   </content>
</entry>
<entry>
   <title>importing-the-output-of-ledger</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-12-importing-the-output-of-ledger.html"/>
   <updated>2010-08-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-12-importing-the-output-of-ledger.html</id>
   <content type="html">
   <pre>
** importing the output of ledger
   :PROPERTIES:
   :DATE:     2010-08-12
   :END:
#+results: ledger-output
#+begin_example 
  09-Aug-21 CHEQUE : 9953055                    Expenses:Unknown                                    166.70 EUR            166.70 EUR
  09-Sep-17 CHEQUE : 7691785                    Expenses:Unknown                                    100.00 EUR            266.70 EUR
  09-Oct-16 REMISE CHEQUE N 8686318 001 105     Expenses:Unknown                                   -525.00 EUR           -258.30 EUR
#+end_example

#+begin_src emacs-lisp :var ledger=ledger-output
  (with-temp-buffer
    (insert ledger)
    (message ledger)
    (org-table-convert-region (point-min) (point-max) 2)
    (org-table-to-lisp))
#+end_src

#+results:
| 09-Aug-21 CHEQUE : 9953055                | Expenses:Unknown | 166.70 EUR  | 166.70 EUR  |
| 09-Sep-17 CHEQUE : 7691785                | Expenses:Unknown | 100.00 EUR  | 266.70 EUR  |
| 09-Oct-16 REMISE CHEQUE N 8686318 001 105 | Expenses:Unknown | -525.00 EUR | -258.30 EUR |

   </pre>
   </content>
</entry>
<entry>
   <title>lisp</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-12-lisp.html"/>
   <updated>2010-08-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-12-lisp.html</id>
   <content type="html">
   <pre>
** lisp
   :PROPERTIES:
   :DATE:     2010-08-12
   :END:

#+begin_src lisp :var n=5
  (mapcar (lambda (el) (* el el)) (append '(1 7 3 4) (list n)))
#+end_src

#+results:
| 1 | 49 | 9 | 16 | 25 |

#+results: short-list
| 1 |
| 2 |
| 3 |

#+begin_src lisp :var lst=short-list :session t
  (+ 1 (length lst))
#+end_src

#+results:
: 4

   </pre>
   </content>
</entry>
<entry>
   <title>lob----writing-results-out-to-files</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-12-lob----writing-results-out-to-files.html"/>
   <updated>2010-08-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-12-lob----writing-results-out-to-files.html</id>
   <content type="html">
   <pre>
** lob -- writing results out to files
   :PROPERTIES:
   :DATE:     2010-08-12
   :END:
#+source: table
#+begin_src emacs-lisp
  (mapcar
   (lambda (el) (number-sequence el (+ el 3)))
   (number-sequence 0 4))
#+end_src

writes the results out as csv file
#+call: write(data=table, file="~/Desktop/example.csv") :results silent

writes the results out as tab separated file
#+call: write(data=table, file="~/Desktop/example.tsv") :results silent

write the results out as a normal org-mode file
#+call: write(data=table, file="~/Desktop/example.org") :results silent

   </pre>
   </content>
</entry>
<entry>
   <title>tangle-r-and-load</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-12-tangle-r-and-load.html"/>
   <updated>2010-08-12:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-12-tangle-r-and-load.html</id>
   <content type="html">
   <pre>
** tangle R and load
  :PROPERTIES:
  :tangle:   to-load.r
  :DATE:     2010-08-12
  :END:

evaluate this
#+begin_src emacs-lisp :results silent :tangle no
  (setq org-babel-post-tangle-hook nil)
  (add-hook 'org-babel-post-tangle-hook
            (lambda () (ess-load-file (buffer-file-name))))
#+end_src

then tangle

#+begin_src R :comments yes
x &lt;- 10
#+end_src

#+begin_src R
 y &lt;- 9
#+end_src

#+begin_src R :tangle file2.R
 y &lt;- 9
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>ledger-example-output-text</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-13-ledger-example-output-text.html"/>
   <updated>2010-08-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-13-ledger-example-output-text.html</id>
   <content type="html">
   <pre>
** ledger example output text
   :PROPERTIES:
   :DATE:     2010-08-13
   :END:
#+results: ledger-stuff
#+begin_example
09-Aug-21 CHEQUE : 9953055                    Expenses:Unknown                                    166.70 EUR            166.70 EUR
09-Sep-17 CHEQUE : 7691785                    Expenses:Unknown                                    100.00 EUR            266.70 EUR
09-Oct-16 REMISE CHEQUE N 8686318 001 105     Expenses:Unknown                                   -525.00 EUR           -258.30 EUR
#+end_example

#+begin_src sh :var stuff=ledger-stuff
  echo "$stuff"
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>org-results-and-replace</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-18-org-results-and-replace.html"/>
   <updated>2010-08-18:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-18-org-results-and-replace.html</id>
   <content type="html">
   <pre>
** org results and replace
   :PROPERTIES:
   :DATE:     2010-08-18
   :END:

#+begin_src emacs-lisp :results org
  "| 1 | 2 |
| 2 | 3 |"
#+end_src

#+results:
| 1 | 2 |
| 2 | 3 |

#+begin_src R
  rnorm(1)
#+end_src

#+begin_src R
  numbers &lt;- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
  numbers
#+end_src

#+results:
| 51 | 43 | 22 |
| 92 | 28 | 21 |
| 68 | 22 |  9 |

#+begin_src R :colnames yes
  numbers &lt;- matrix(c(51,43,22,92,28,21,68,22,9),ncol=3,byrow=TRUE)
  numbers
#+end_src

#+results:
| V1 | V2 | V3 |
|----+----+----|
| 51 | 43 | 22 |
| 92 | 28 | 21 |
| 68 | 22 |  9 |

   </pre>
   </content>
</entry>
<entry>
   <title>issues-with-shell-evaluation</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-25-issues-with-shell-evaluation.html"/>
   <updated>2010-08-25:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-25-issues-with-shell-evaluation.html</id>
   <content type="html">
   <pre>
** issues with shell evaluation
   :PROPERTIES:
   :DATE:     2010-08-25
   :END:
#+begin_src sh :results silent
  cd ~/src/org/
  make
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>not-caching</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-25-not-caching.html"/>
   <updated>2010-08-25:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-25-not-caching.html</id>
   <content type="html">
   <pre>
** not caching
   :PROPERTIES:
   :session:  *R*
   :results:  output
   :exports:  both
   :cache:    yes
   :DATE:     2010-08-25
   :END:

#+begin_src R :noeval
  cat("random result:", runif(1), "\n")
  Sys.sleep(2)
  alarm()
#+end_src 

#+begin_src R :noeval
  cat("random result:", runif(1), "\n")
  Sys.sleep(2)
  alarm()
#+end_src 

*** cache on export
    :PROPERTIES:
    :DATE:     2010-08-25
    :END:
do we export cached blocks

#+begin_src emacs-lisp :cache yes :exports results
  (random)
#+end_src

#+results[46632b4fe2e3a23e847953c95adcba58c270b381]:
: 490528137

*** looks like this is a problem with info collection
    :PROPERTIES:
    :DATE:     2010-08-25
    :END:
#+begin_src emacs-lisp
  (format "%S" info)
#+end_src

#+begin_src emacs-lisp :results scalar :exports results :tangle yes :comments yes
  (mapcar (lambda (el) (list (car el) (cdr el))) (nth 2 info))
#+end_src

#+results[4184710f118ac768ea0d90632508792d695efd7a]:
| :cache    | yes                   |
| :colnames | no                    |
| :comments | yes                   |
| :exports  | results               |
| :hlines   | yes                   |
| :noweb    | no                    |
| :results  | output replace scalar |
| :session  | *R*                   |
| :shebang  |                       |
| :tangle   | yes                   |

#+begin_src emacs-lisp :exports results
  (message "calculating info")
  (org-babel-sha1-hash info)
#+end_src

#+results[0427db66afdc95462d1c8514b662829987d71ff5]:
: 0427db66afdc95462d1c8514b662829987d71ff5

   </pre>
   </content>
</entry>
<entry>
   <title>duplicate-results-on-execute-subtree</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-26-duplicate-results-on-execute-subtree.html"/>
   <updated>2010-08-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-26-duplicate-results-on-execute-subtree.html</id>
   <content type="html">
   <pre>
** duplicate results on execute subtree
   :PROPERTIES:
   :DATE:     2010-08-26
   :END:
#+begin_src emacs-lisp :results org :exports results
  "- first
- second
- third
"
#+end_src

#+results:
#+BEGIN_SRC org
- first
- second
- third
#+END_SRC

   </pre>
   </content>
</entry>
<entry>
   <title>eval-and-noeval</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-26-eval-and-noeval.html"/>
   <updated>2010-08-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-26-eval-and-noeval.html</id>
   <content type="html">
   <pre>
** eval and noeval
   :PROPERTIES:
   :DATE:     2010-08-26
   :END:
date, should export both, but won't output results because of presence
of the =:noeval= header argument.
#+begin_src sh :noeval :exports both
  date
#+end_src

should export code, so no need to do anything
#+begin_src sh
  date
#+end_src

should export nothing, and should not query
#+source: this-is-ls
#+begin_src sh :eval query :exports code
  date
#+end_src

should export results, and should trigger query above
#+begin_src emacs-lisp :var ls=this-is-ls :exports results
  ls
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>eval-for-side-effect-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-26-eval-for-side-effect-on-export.html"/>
   <updated>2010-08-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-26-eval-for-side-effect-on-export.html</id>
   <content type="html">
   <pre>
** eval for side effect on export
   :PROPERTIES:
   :DATE:     2010-08-26
   :END:
- one plus one
  #+source: one-plus-one
  #+begin_src emacs-lisp :exports none :results silent
    (+ 1 1)
  #+end_src
- plus one is
  #+begin_src emacs-lisp :var two=one-plus-one :exports both
    (+ 1 two)
  #+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>trying-out-plantuml</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-26-trying-out-plantuml.html"/>
   <updated>2010-08-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-26-trying-out-plantuml.html</id>
   <content type="html">
   <pre>
** trying out plantuml
   :PROPERTIES:
   :DATE:     2010-08-26
   :END:
setup
#+begin_src emacs-lisp :results silent
  (require 'ob-plantuml)
  (setq org-plantuml-jar-path "~/src/org/contrib/scripts/plantuml.jar")
#+end_src

usage -- sequence diagram
#+begin_src plantuml :file tryout.png
  Alice -&gt; Bob: synchronous call
  Alice -&gt;&gt; Bob: asynchronous call
#+end_src

#+results:
[[file:tryout.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>wrapping-up-rawithoutrg-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-26-wrapping-up-rawithoutrg-results.html"/>
   <updated>2010-08-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-26-wrapping-up-rawithoutrg-results.html</id>
   <content type="html">
   <pre>
** wrapping up raw/org results
   :PROPERTIES:
   :DATE:     2010-08-26
   :END:
#+begin_src emacs-lisp :results org :exports results
  "- first
  - second
  - third
  "
#+end_src

#+results:
#+BEGIN_SRC org
- first
- second
- third
#+END_SRC

   </pre>
   </content>
</entry>
<entry>
   <title>initial-javascript-support</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-27-initial-javascript-support.html"/>
   <updated>2010-08-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-27-initial-javascript-support.html</id>
   <content type="html">
   <pre>
** initial javascript support
   :PROPERTIES:
   :DATE:     2010-08-27
   :END:
using node.js

#+begin_src js
  var n = 0;
  n = n+1;
  return n
#+end_src

#+results:
: 1

#+source: cars
#+begin_src js
  var cars = ["Saab","Volvo","BMW"];
  return cars;
#+end_src

#+results: cars
| Saab | Volvo | BMW |

#+begin_src js :var cars=cars
  return cars[0][0];
#+end_src

#+results:
: Saab

#+begin_src js :var cars=cars
  return cars[0].length;
#+end_src

#+results:
: 3

   </pre>
   </content>
</entry>
<entry>
   <title>initial-scheme-support</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-27-initial-scheme-support.html"/>
   <updated>2010-08-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-27-initial-scheme-support.html</id>
   <content type="html">
   <pre>
** initial scheme support
   :PROPERTIES:
   :DATE:     2010-08-27
   :END:
#+source: numbers
#+begin_src scheme
  (map (lambda (el) (+ el 1)) '(1 2 3))
#+end_src

#+results:
| 2 | 3 | 4 |

#+begin_src scheme :var numbers=numbers
  (map (lambda (el) (- el 1)) numbers)
#+end_src

#+results:
| 1 | 2 | 3 |

   </pre>
   </content>
</entry>
<entry>
   <title>pulling-information-from-tags</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-30-pulling-information-from-tags.html"/>
   <updated>2010-08-30:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-30-pulling-information-from-tags.html</id>
   <content type="html">
   <pre>
** pulling information from tags                                       :blue:
   :PROPERTIES:
   :DATE:     2010-08-30
   :END:

#+begin_src R :var color=(car (org-get-tags-at (point))) :tangle example.R
  color
#+end_src

#+results:
: blue

   </pre>
   </content>
</entry>
<entry>
   <title>conditional-tangling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-31-conditional-tangling.html"/>
   <updated>2010-08-31:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-31-conditional-tangling.html</id>
   <content type="html">
   <pre>
** conditional tangling
   :PROPERTIES:
   :DATE:     2010-08-31
   :END:
#+begin_src emacs-lisp :results silent
  (setq tangle-tag "right")
#+end_src

*** first subheading                                                   :left:
    :PROPERTIES:
    :DATE:     2010-08-31
    :END:
#+begin_src R :tangle (and (equal (car (org-get-tags-at (point))) tangle-tag) "yes")
  "first"
#+end_src

*** second subheading                                                 :right:
    :PROPERTIES:
    :DATE:     2010-08-31
    :END:
#+begin_src R :tangle (and (equal (car (org-get-tags-at (point))) tangle-tag) "yes")
  "second"
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>scheme-sessions</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-08-31-scheme-sessions.html"/>
   <updated>2010-08-31:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-08-31-scheme-sessions.html</id>
   <content type="html">
   <pre>
** scheme sessions
   :PROPERTIES:
   :DATE:     2010-08-31
   :END:
#+begin_src scheme :var number=9 :session *scheme* :scheme guile
  (+ number 0)
#+end_src

#+results:
: 9

#+begin_src scheme :var number=9 :session *scheme* :scheme racket
  (+ number 1)
#+end_src

#+results:
: 10

   </pre>
   </content>
</entry>
<entry>
   <title>:session-evaluation-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-01-:session-evaluation-on-export.html"/>
   <updated>2010-09-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-01-:session-evaluation-on-export.html</id>
   <content type="html">
   <pre>
** :session evaluation on export
   :PROPERTIES:
   :DATE:     2010-09-01
   :END:
This first block is evaluated but /doesn't/ appear in export.

/:session *R* :exports none/
#+begin_src R :session *R* :exports none
  x &lt;- 8
#+end_src

This second block /does/ appear in export.

#+begin_src R :session *R* :exports results
  x
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>ditaa-with-tilda-in-path</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-01-ditaa-with-tilda-in-path.html"/>
   <updated>2010-09-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-01-ditaa-with-tilda-in-path.html</id>
   <content type="html">
   <pre>
** ditaa with tilda in path
   :PROPERTIES:
   :DATE:     2010-09-01
   :END:
#+begin_src ditaa :file example.png
    +--------------+
    |              |
    |              |
    |              |
    |              |
    |              |
    +--------------+
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>:var-(buffer-file-name)</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-03-:var-(buffer-file-name).html"/>
   <updated>2010-09-03:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-03-:var-(buffer-file-name).html</id>
   <content type="html">
   <pre>
** :var (buffer-file-name)
   :PROPERTIES:
   :DATE:     2010-09-03
   :END:
during export (buffer-file-name) will return nil because the temporary
export buffer is not visiting any file.

/file=(vc-working-revision (buffer-file-name))/
#+begin_src sh :var file=(vc-working-revision (or (buffer-file-name) "")) :exports results
  echo $file Revision
#+end_src

/file=(vc-working-revision (or (buffer-file-name) org-current-export-file))/
#+begin_src sh :var file=(vc-working-revision (or (buffer-file-name) org-current-export-file)) :exports results
  echo $file Revision
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>quoting-header-args-(e.g.-:cmdline)</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-03-quoting-header-args-(e.g.-:cmdline).html"/>
   <updated>2010-09-03:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-03-quoting-header-args-(e.g.-:cmdline).html</id>
   <content type="html">
   <pre>
** quoting header args (e.g. :cmdline)
   :PROPERTIES:
   :DATE:     2010-09-03
   :END:
#+begin_src C :cmdline 1 2 3 4 5 :includes &lt;stdio.h&gt;
  int main(int argc, char **argv){
    printf("argv[1] %s\n", argv[1]);
    return 0;
  }
#+end_src

#+results:
: argv[1] 1

   </pre>
   </content>
</entry>
<entry>
   <title>tangling-with-full-comments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-04-tangling-with-full-comments.html"/>
   <updated>2010-09-04:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-04-tangling-with-full-comments.html</id>
   <content type="html">
   <pre>
** tangling with full comments
   :PROPERTIES:
   :comments: org
   :tangle:   full-comments.el
   :DATE:     2010-09-04
   :END:
The top block
#+begin_src emacs-lisp
  (message "first block")
#+end_src

here's some text which won't be tangled

*** subheading
    :PROPERTIES:
    :DATE:     2010-09-04
    :END:
another block
| 1 | first  |
| 2 | second |
#+begin_src emacs-lisp
  (message "second")
#+end_src

and finally a block with a =:noweb= header argument
#+begin_src emacs-lisp :noweb yes
  (progn
    &lt;&lt;tangle-el-the-second&gt;&gt;)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>customizable-comment-formats</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-05-customizable-comment-formats.html"/>
   <updated>2010-09-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-05-customizable-comment-formats.html</id>
   <content type="html">
   <pre>
** customizable comment formats
   :PROPERTIES:
   :tangle:   yes
   :comments: yes
   :DATE:     2010-09-05
   :END:

#+begin_src emacs-lisp :results silent
  (setq org-babel-tangle-comment-format-beg "{-# LINE %start-line \"%file\" #-}"
        org-babel-tangle-comment-format-end ""
        org-babel-tangle-pad-newline)
#+end_src

#+begin_src haskell :tangle Main.hs
  test = length
  main = print $ test [1,2,3]
#+end_src

I would like the following output in the tangled file Main.hs:

: {-# LINE 4 "Haskell.org" #-}
: test = length
: main = print $ test [1,2,3]

   </pre>
   </content>
</entry>
<entry>
   <title>comparative-speed-of-python-evaluation</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-07-comparative-speed-of-python-evaluation.html"/>
   <updated>2010-09-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-07-comparative-speed-of-python-evaluation.html</id>
   <content type="html">
   <pre>
** comparative speed of python evaluation
   :PROPERTIES:
   :DATE:     2010-09-07
   :END:
#+begin_src python :session test
  2+2
#+end_src

#+results:
: 4

#+begin_src python
  return 2+2
#+end_src

#+results:
: 4

#+begin_src python :session test
def add(a,b):
   return a+b
def sub(a,b):
   return a-b
add(sub(10,1),sub(10,2))
#+end_src

#+results:
: org_babel_python_eoe

   </pre>
   </content>
</entry>
<entry>
   <title>remove-results-when-nil-is-returned</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-07-remove-results-when-nil-is-returned.html"/>
   <updated>2010-09-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-07-remove-results-when-nil-is-returned.html</id>
   <content type="html">
   <pre>
** remove results when nil is returned
   :PROPERTIES:
   :DATE:     2010-09-07
   :END:
#+begin_src emacs-lisp
  (progn (+ 1 1) nil)
#+end_src

#+results:

   </pre>
   </content>
</entry>
<entry>
   <title>tangle-org-mode-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-07-tangle-org-mode-block.html"/>
   <updated>2010-09-07:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-07-tangle-org-mode-block.html</id>
   <content type="html">
   <pre>
** tangle org-mode block
   :PROPERTIES:
   :DATE:     2010-09-07
   :END:
#+source: org-list
#+begin_src org :results latex
  - one
  - two
  - three
#+end_src

#+begin_src emacs-lisp :tangle example.tangled :noweb yes
  "
  &lt;&lt;org-list()&gt;&gt;
  "
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>empty-string-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-08-empty-string-results.html"/>
   <updated>2010-09-08:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-08-empty-string-results.html</id>
   <content type="html">
   <pre>
** empty-string results
   :PROPERTIES:
   :DATE:     2010-09-08
   :END:
test me one two 3

#+begin_src emacs-lisp
#+end_src

More test

#+begin_src emacs-lisp
  (mapcar
   (lambda (pair)
     (list (car pair) (cdr pair)))
   params)
#+end_src

#+results:
| :cache    | no      |
| :colnames | no      |
| :comments |         |
| :exports  | code    |
| :hlines   | yes     |
| :noweb    | no      |
| :results  | replace |
| :session  | none    |
| :shebang  |         |
| :tangle   | no      |

   </pre>
   </content>
</entry>
<entry>
   <title>header-arguments-on-call-line</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-09-header-arguments-on-call-line.html"/>
   <updated>2010-09-09:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-09-header-arguments-on-call-line.html</id>
   <content type="html">
   <pre>
** header arguments on call line
   :PROPERTIES:
   :DATE:     2010-09-09
   :END:
#+source: eight
#+begin_src R
  8
#+end_src

#+call: eight() :results vector

#+results: eight()
| 8 |

maybe the following with the new proposed header arguments

#+call: eight[:session *R*]() :results vector

   </pre>
   </content>
</entry>
<entry>
   <title>splitting-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-19-splitting-code-blocks.html"/>
   <updated>2010-09-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-19-splitting-code-blocks.html</id>
   <content type="html">
   <pre>
** splitting code blocks
   :PROPERTIES:
   :DATE:     2010-09-19
   :END:
- with indentation
  #+begin_src emacs-lisp
    ;;;###autoload
    (defun org-babel-previous-src-block (&amp;optional arg)
      "Jump to the previous source block.
    With optional prefix argument ARG, jump backward ARG many source blocks."
      (interactive "P")
      (condition-case nil
          (re-search-backward org-babel-src-block-regexp nil nil (or arg 1))
        (error (error "No previous code blocks")))
      (goto-char (match-beginning 0)) (org-show-context))
  #+end_src
  
  #+begin_src emacs-lisp
    ;;;###autoload
    (defun org-babel-split-block-maybe (&amp;optional arg)
      "Split the current source code block on the cursor."
      (interactive "p")
      ((lambda (info)
         (if info
             (let ((lang (nth 0 info))
                   (indent (nth 6 info))
                   (stars (make-string (org-current-level) ?*)))
               (insert (concat (if (looking-at "^") "" "\n")
                               (make-string indent ? ) "#+end_src\n"
                               (if arg stars (make-string indent ? )) "\n"
                               (make-string indent ? ) "#+begin_src " lang
                               (if (looking-at "[\n\r]") "" "\n  "))))
           (message "Not in src block.")))
       (org-babel-get-src-block-info)))
    
    ;; other stuff
  #+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>letter</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-21-letter.html"/>
   <updated>2010-09-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-21-letter.html</id>
   <content type="html">
   <pre>
** Letter
   :PROPERTIES:
   :DATE:     2010-09-21
   :END:

#+source: body
#+begin_src org :results latex
  ,My body includes a list:
  
  ,- one
  ,- two
  
  ,and a small table:
  
  ,| first | second |
  ,| other | last   |
  
  ,Not more.
#+end_src

#+begin_src latex :noweb yes :tangle yes
\documentclass[11pt]{isodoc}
\usepackage[utf8x]{inputenc}
\usepackage[T1]{fontenc}

\setupdocument{
    to = {Eric},
    subject = {Tough to understand what to do...},
    opening = {Hi},
    closing = {Best}
}

\begin{document}
\letter{%
&lt;&lt;body()&gt;&gt;
}
\end{document}
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>cycle----the-input-is-the-output</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-09-29-cycle----the-input-is-the-output.html"/>
   <updated>2010-09-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-09-29-cycle----the-input-is-the-output.html</id>
   <content type="html">
   <pre>
** cycle -- the input is the output
   :PROPERTIES:
   :DATE:     2010-09-29
   :END:
and the rhythm is the base and the base is the treble

#+results: cycle
| one   |
| two   |
| three |

#+source: cycle
#+begin_src emacs-lisp :var table=cycle
  (append (last table) (butlast table))
#+end_src

#+begin_src emacs-lisp :exports results
  (+ 1 1 1)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>index-into-a-scalar</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-13-index-into-a-scalar.html"/>
   <updated>2010-10-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-13-index-into-a-scalar.html</id>
   <content type="html">
   <pre>
** index into a scalar
   :PROPERTIES:
   :DATE:     2010-10-13
   :END:
#+tblname: short-list
| a |
| b |

#+begin_src emacs-lisp :var scalar=short-list[0,0]
  scalar
#+end_src

#+results:
: a

   </pre>
   </content>
</entry>
<entry>
   <title>preceding-blank-lines-on-tangle</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-13-preceding-blank-lines-on-tangle.html"/>
   <updated>2010-10-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-13-preceding-blank-lines-on-tangle.html</id>
   <content type="html">
   <pre>
** preceding blank lines on tangle
   :PROPERTIES:
   :DATE:     2010-10-13
   :END:
#+begin_src emacs-lisp :results silent
  (setq org-babel-tangle-pad-newline nil)
#+end_src

#+begin_src sh :tangle something.reg
  # something
  echo "else"
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>very-very-large-numbers</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-13-very-very-large-numbers.html"/>
   <updated>2010-10-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-13-very-very-large-numbers.html</id>
   <content type="html">
   <pre>
** very very large numbers
   :PROPERTIES:
   :DATE:     2010-10-13
   :END:
#+tblname: numbers
|                           1 |
|                           2 |
|                          12 |
|                          45 |
|                         166 |
|                    12567890 |
| 231231282371983279389999999 |

#+begin_src emacs-lisp :var numbers=numbers
  (mapcar
   (lambda (line)
       (let ((number (car line)))
         (list number (type-of number))))
     numbers)
#+end_src

#+results:
|                      1 | integer |
|                      2 | integer |
|                     12 | integer |
|                     45 | integer |
|                    166 | integer |
|               12567890 | integer |
| 2.3123128237198328e+26 | float   |

   </pre>
   </content>
</entry>
<entry>
   <title>weaving-with-noweb-links</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-13-weaving-with-noweb-links.html"/>
   <updated>2010-10-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-13-weaving-with-noweb-links.html</id>
   <content type="html">
   <pre>
** weaving with noweb links
   :PROPERTIES:
   :tangle:   yes
   :DATE:     2010-10-13
   :END:

#+source: name
#+begin_src emacs-lisp
  (message "eric")
#+end_src

#+begin_src emacs-lisp :noweb tangle
  ;; name
  &lt;&lt;name&gt;&gt;
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>security-problem-with-elisp-in-header-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-14-security-problem-with-elisp-in-header-arguments.html"/>
   <updated>2010-10-14:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-14-security-problem-with-elisp-in-header-arguments.html</id>
   <content type="html">
   <pre>
** security problem with elisp in header arguments
   :PROPERTIES:
   :DATE:     2010-10-14
   :END:
#+begin_src emacs-lisp :var data=(setq org-confirm-babel-evaluate nil) :results silent
  (+ 1 1)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>export-specific-header-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-26-export-specific-header-arguments.html"/>
   <updated>2010-10-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-26-export-specific-header-arguments.html</id>
   <content type="html">
   <pre>
** export-specific header arguments
   :PROPERTIES:
   :DATE:     2010-10-26
   :END:

#+headers: :var out=(if (and (boundp 'latexp) latexp) "latex" "not latex") 
#+begin_src emacs-lisp
  out
#+end_src

#+results:
: not latex

   </pre>
   </content>
</entry>
<entry>
   <title>latex-headers-in-latex-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-26-latex-headers-in-latex-code-blocks.html"/>
   <updated>2010-10-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-26-latex-headers-in-latex-code-blocks.html</id>
   <content type="html">
   <pre>
** latex headers in latex code blocks
   :PROPERTIES:
   :DATE:     2010-10-26
   :END:

#+begin_src latex :headers \usepackage{lmodern} :file name1.pdf
  Eric Schulte
#+end_src

#+results:
[[file:name1.pdf]]

#+begin_src latex :headers '("\\usepackage{mathpazo}" "\\usepackage{fullpage}") :file name2.pdf
  Eric Schulte
#+end_src

#+results:
[[file:name2.pdf]]

   </pre>
   </content>
</entry>
<entry>
   <title>simple-gnuplot-tests</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-26-simple-gnuplot-tests.html"/>
   <updated>2010-10-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-26-simple-gnuplot-tests.html</id>
   <content type="html">
   <pre>
** simple gnuplot tests
   :PROPERTIES:
   :DATE:     2010-10-26
   :END:
#+results: some-more-gnuplot
| 1 |  1 |
| 2 |  4 |
| 3 |  9 |
| 4 | 16 |
| 5 | 25 |
| 6 | 36 |
| 7 | 49 |
| 8 | 64 |
#+TBLFM: $2=$1*$1

#+begin_src gnuplot :var data=some-more-gnuplot
  plot "$data"
#+end_src

#+results:

Plotting data points from a table could look like this:
#+tblname: basic-plot
|   x |         y1 |         y2 |
|-----+------------+------------|
| 0.1 |      0.425 |      0.375 |
| 0.2 |     0.3125 |     0.3375 |
| 0.3 | 0.24999993 | 0.28333338 |
| 0.4 |      0.275 |    0.28125 |
| 0.5 |       0.26 |       0.27 |
| 0.6 | 0.25833338 | 0.24999993 |
| 0.7 | 0.24642845 | 0.23928553 |
| 0.8 |    0.23125 |     0.2375 |
| 0.9 | 0.23333323 |  0.2333332 |
|   1 |     0.2225 |       0.22 |

#+begin_src gnuplot :var data=basic-plot :exports code :file basic-plot.png
set title "Putting it All Together"

set xlabel "X"
set xrange [0:1]
set xtics 0,0.1,1

set ylabel "Y"
set yrange [0.2:0.5]
set ytics 0.2,0.05,0.5

plot data u 1:2 w p lw 2 title 'x vs. y1', \
     data u 1:3 w lp lw 1 title 'x vx. y2'
#+end_src

#+results:
[[file:basic-plot.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>passing-arguments-through-call-lines</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-10-29-passing-arguments-through-call-lines.html"/>
   <updated>2010-10-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-10-29-passing-arguments-through-call-lines.html</id>
   <content type="html">
   <pre>
** passing arguments through call lines
   :PROPERTIES:
   :DATE:     2010-10-29
   :END:

#+source: test
#+begin_src R :session :file test.pdf :var myarg="bla"
  plot(1:10, main=myarg)
#+end_src

#+results: test
[[file:test.pdf]]

#+call: test(myarg="hiho")

#+results: test(myarg="hiho")
: test.pdf

   </pre>
   </content>
</entry>
<entry>
   <title>playing-with-calc-support</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-03-playing-with-calc-support.html"/>
   <updated>2010-11-03:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-03-playing-with-calc-support.html</id>
   <content type="html">
   <pre>
** playing with calc support
   :PROPERTIES:
   :DATE:     2010-11-03
   :END:
#+begin_src emacs-lisp
  (require 'ob-calc)
#+end_src

#+begin_src calc :var some=8
  some
  some
  '*
  8+8
  '+
#+end_src

#+results:
: 80

#+begin_src calc
  2*(8+8)
#+end_src

#+results:
: 32

#+begin_src calc
  2*e
#+end_src

#+results:
: 5.43656365692

#+begin_src calc :var something=9
  2*something
#+end_src

#+results:
: 18

   </pre>
   </content>
</entry>
<entry>
   <title>shell-blocks-returning-a-file-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-03-shell-blocks-returning-a-file-name.html"/>
   <updated>2010-11-03:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-03-shell-blocks-returning-a-file-name.html</id>
   <content type="html">
   <pre>
** shell blocks returning a file name
   :PROPERTIES:
   :DATE:     2010-11-03
   :END:
#+begin_src sh :file quick.txt :results output
  date
#+end_src

#+results:
[[file:quick.txt]]

   </pre>
   </content>
</entry>
<entry>
   <title>clojure-code-blocks-and-the-lazies</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-06-clojure-code-blocks-and-the-lazies.html"/>
   <updated>2010-11-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-06-clojure-code-blocks-and-the-lazies.html</id>
   <content type="html">
   <pre>
** clojure code blocks and the lazies
   :PROPERTIES:
   :DATE:     2010-11-06
   :END:
#+begin_src emacs-lisp :results silent
  (defun org-babel-execute:clojure (body params)
    (with-temp-buffer
      (insert body)
      (read
       (slime-eval
        `(swank:interactive-eval-region 
          ,(buffer-substring-no-properties (point-min) (point-max)))))))
#+end_src

#+begin_src clojure
  (map (fn [el] (list el (* el el)))(range 10))
#+end_src

#+results:
| 0 |  0 |
| 1 |  1 |
| 2 |  4 |
| 3 |  9 |
| 4 | 16 |
| 5 | 25 |
| 6 | 36 |
| 7 | 49 |
| 8 | 64 |
| 9 | 81 |

   </pre>
   </content>
</entry>
<entry>
   <title>lob-calls-with-header-argument-pass-through</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-08-lob-calls-with-header-argument-pass-through.html"/>
   <updated>2010-11-08:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-08-lob-calls-with-header-argument-pass-through.html</id>
   <content type="html">
   <pre>
** lob calls with header argument pass through
   :PROPERTIES:
   :DATE:     2010-11-08
   :END:

#+source: lob-header
#+begin_src emacs-lisp :var n=20
  n
#+end_src

#+call: lob-header[:results vector](n=15)

#+results: lob-header[:results vector](n=15)
| 15 |

#+call: lob-header(n=10) :results vector

#+results: lob-header(n=10)
| 10 |

need ob-ref.el to pass through the header arguments in "[]"s
#+begin_src emacs-lisp :var n=lob-header[:results vector](n=8)
  n
#+end_src

#+results:
| 8 |

#+begin_src emacs-lisp :var n=lob-header[:results vector](n=8)[0,0]
  n
#+end_src

#+results:
: 8

   </pre>
   </content>
</entry>
<entry>
   <title>sqlite</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-10-sqlite.html"/>
   <updated>2010-11-10:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-10-sqlite.html</id>
   <content type="html">
   <pre>
** sqlite
   :PROPERTIES:
   :DATE:     2010-11-10
   :END:
#+begin_src sqlite :db paper/climate.sqlite
  select count(*) from temps;
#+end_src

#+results:
: 422689

   </pre>
   </content>
</entry>
<entry>
   <title>introducing-wrap-header-argument</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-19-introducing-wrap-header-argument.html"/>
   <updated>2010-11-19:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-19-introducing-wrap-header-argument.html</id>
   <content type="html">
   <pre>
** introducing =wrap= header argument
   :PROPERTIES:
   :DATE:     2010-11-19
   :END:
#+begin_src emacs-lisp :results wrap :exports both
  (mapcar (lambda (el) (list el (+ 1 (* el el)))) (number-sequence 0 10))
#+end_src

#+results:
#+BEGIN_RESULT
|  0 |   1 |
|  1 |   2 |
|  2 |   5 |
|  3 |  10 |
|  4 |  17 |
|  5 |  26 |
|  6 |  37 |
|  7 |  50 |
|  8 |  65 |
|  9 |  82 |
| 10 | 101 |
#+END_RESULT

now indented
- first
- second
  #+begin_src emacs-lisp :results wrap :exports both
    "something else"
  #+end_src

  #+results:
  #+BEGIN_RESULT
  : something else
  #+END_RESULT

   </pre>
   </content>
</entry>
<entry>
   <title>lists-as-data-types</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-19-lists-as-data-types.html"/>
   <updated>2010-11-19:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-19-lists-as-data-types.html</id>
   <content type="html">
   <pre>
** lists as data types
   :PROPERTIES:
   :DATE:     2010-11-19
   :END:

#+results: a-list
- org-mode
- and
- babel

#+source: a-list
#+begin_src emacs-lisp :var lst=a-list :results list
  (reverse lst)
#+end_src

also for a block inside of a list
1. First element
2. Second element -- has a block
   #+begin_src emacs-lisp
     (+ 1 1 1 1)
   #+end_src

   #+results:
   : 4

3. third element

   </pre>
   </content>
</entry>
<entry>
   <title>add-column-to-table-with-awk</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-23-add-column-to-table-with-awk.html"/>
   <updated>2010-11-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-23-add-column-to-table-with-awk.html</id>
   <content type="html">
   <pre>
** add column to table with awk
   :PROPERTIES:
   :question_author: S&#233;bastien Vauban
   :DATE:     2010-11-23
   :END:
I want to *add a column* to the following table.

#+results: table-message
| This is line 1 of the message.        |
| This is line 2 of the message.        |
| This is the last line of the message. |

Its value should be dependant on a *regexp matching* the *current row*
(for example, if 1 is detected in the original column, then write "A"
in the new one, "B" if 2 is read, "C" if 3 is read, etc.).

Hence, I'm thinking using AWK as an easy solution.

    #+begin_src note
    I'm open to other ideas on how I could do this as easily. Just throw me
    ideas, if you have some.
    #+end_src

the easiest (for me) would be with the elisp =mapcar= function
#+begin_src emacs-lisp :var tbl=table-message
  (mapcar (lambda (row) (cons "New col" row)) tbl)
#+end_src

#+results:
| New col | This is line 1 of the message.        |
| New col | This is line 2 of the message.        |
| New col | This is the last line of the message. |

*First* trial: add a column whose cell contents will be *fixed* (here,
equal to =New col=).

#+srcname: add-col
#+begin_src sh :var data=table-message :results output raw :exports both
echo "$data" | awk '// {print "| New col | " $0 " |";}'
#+end_src

#+results: add-col
| New col | This is line 1 of the message.        |
| New col | This is line 2 of the message.        |
| New col | This is the last line of the message. |

   </pre>
   </content>
</entry>
<entry>
   <title>reading-from-single-quote-delim-languages</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-23-reading-from-single-quote-delim-languages.html"/>
   <updated>2010-11-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-23-reading-from-single-quote-delim-languages.html</id>
   <content type="html">
   <pre>
** reading from single-quote-delim languages
   :PROPERTIES:
   :DATE:     2010-11-23
   :END:
#+BEGIN_SRC python
return [['607', 'Show license short, name on the deed'],
        ['255', "'(message (concat 'hello ' 'world))"]]
#+END_SRC

#+results:
| 607 | Show license short, name on the deed |
| 255 | '(message (concat 'hello ' 'world))  |

#+begin_src ruby
  [['607', 'Show license, short name on the deed'],
   ['255', "))'(message (concat 'hello ' 'world"]]
#+end_src

#+results:
| 607 | Show license, short name on the deed |
| 255 | ))'(message (concat 'hello ' 'world  |

#+begin_src haskell
  [["'single quotes'", "b"], ["\"double quotes\"", "d"]]
#+end_src

#+results:
| 'single quotes' | b |
| "double quotes" | d |

   </pre>
   </content>
</entry>
<entry>
   <title>safe-lists-for-haskell</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-23-safe-lists-for-haskell.html"/>
   <updated>2010-11-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-23-safe-lists-for-haskell.html</id>
   <content type="html">
   <pre>
** safe lists for Haskell
   :PROPERTIES:
   :DATE:     2010-11-23
   :END:

#+tblname: mixed-table
| 1 | first  |
| 2 | second |
| 3 | third  |
| 4 | fourth | 

#+source: rec-string-wrap
#+begin_src emacs-lisp :var data=mixed-table
  (defun rec-string-wrap (in)
    (if (listp in) (mapcar #'rec-string-wrap in) (format "%S" in)))
  (rec-string-wrap data)
#+end_src

#+begin_src haskell :var tbl=rec-string-wrap(data=mixed-table)
  map head tbl
#+end_src

#+results:
| 1 | 2 | 3 | 4 |

   </pre>
   </content>
</entry>
<entry>
   <title>un-named-r-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-23-un-named-r-code-blocks.html"/>
   <updated>2010-11-23:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-23-un-named-r-code-blocks.html</id>
   <content type="html">
   <pre>
** un-named R code blocks
   :PROPERTIES:
   :DATE:     2010-11-23
   :END:
#+begin_src R
  8
#+end_src

#+results:
: 8

#+begin_src emacs-lisp :eric
8  
#+end_src

#+results:
: 8

#+BEGIN_SRC R :session :results output
 xyz
#+END_SRC

#+BEGIN_SRC R :session *R-2* :results output |  xyz
9
#+END_SRC

#+results:
: [1] 9

   </pre>
   </content>
</entry>
<entry>
   <title>python-with-return-header-argument</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-27-python-with-return-header-argument.html"/>
   <updated>2010-11-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-27-python-with-return-header-argument.html</id>
   <content type="html">
   <pre>
** python with return header argument
   :PROPERTIES:
   :DATE:     2010-11-27
   :END:

#+begin_src python :return y
  x = 8
  y = 98
  2
#+end_src

#+results:
: 98

   </pre>
   </content>
</entry>
<entry>
   <title>:eval-query-shows-the-name</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-30-:eval-query-shows-the-name.html"/>
   <updated>2010-11-30:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-30-:eval-query-shows-the-name.html</id>
   <content type="html">
   <pre>
** =:eval query= shows the name
   :PROPERTIES:
   :DATE:     2010-11-30
   :END:
#+source: i-have-a-name
#+begin_src sh :eval query
  date
#+end_src

#+results: i-have-a-name
: Tue Nov 30 22:03:25 MST 2010

   </pre>
   </content>
</entry>
<entry>
   <title>sql-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-11-30-sql-variables.html"/>
   <updated>2010-11-30:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-11-30-sql-variables.html</id>
   <content type="html">
   <pre>
** sql variables
   :PROPERTIES:
   :DATE:     2010-11-30
   :END:
#+results: sql-param
| table       | valueTable0       |
| column      | valueColumn0      |
| type        | valueType0        |
| nullability | valueNullability0 |

I want to apply the values onto the following chunk of code:

#+srcname: add-column-in-table-0
#+begin_src sql :var table=sql-param[0,1] :var column=sql-param[1,1] :var type=sql-param[2,1] :var nullability=sql-param[3,1]
-- add column `@column' (if column does not exist yet)
IF NOT EXISTS (SELECT *
               FROM INFORMATION_SCHEMA.COLUMNS
               WHERE TABLE_NAME = '@table'
               AND COLUMN_NAME = '@column')
BEGIN
    ALTER TABLE $table
    ADD $column $type @nullability
END
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>empty-lines-in-r-session-output</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-01-empty-lines-in-r-session-output.html"/>
   <updated>2010-12-01:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-01-empty-lines-in-r-session-output.html</id>
   <content type="html">
   <pre>
** empty lines in R session output
   :PROPERTIES:
   :DATE:     2010-12-01
   :END:
#+begin_src R :results output :session
  x &lt;- 1;
  x
  x + 1
  x + 4
#+end_src R

#+results:
: [1] 1
: [1] 2
: [1] 5

   </pre>
   </content>
</entry>
<entry>
   <title>python-requires-a-utf-8-coding-prefix</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-02-python-requires-a-utf-8-coding-prefix.html"/>
   <updated>2010-12-02:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-02-python-requires-a-utf-8-coding-prefix.html</id>
   <content type="html">
   <pre>
** Python requires a utf-8 coding prefix
   :PROPERTIES:
   :DATE:     2010-12-02
   :END:
#+begin_src python :prefix # -*- coding: utf-8 -*- :return s
s = "&#233;"
#+end_src

#+results:
: &#233;

#+begin_src python :prefix # -*- coding: utf-8 -*- :results output
s = "&#233;"
print(s)
#+end_src

#+results:
: &#233;

   </pre>
   </content>
</entry>
<entry>
   <title>missing-lines-on-tangle</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-13-missing-lines-on-tangle.html"/>
   <updated>2010-12-13:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-13-missing-lines-on-tangle.html</id>
   <content type="html">
   <pre>
** missing lines on tangle
   :PROPERTIES:
   :ID:       83eb62fd-4147-405b-bdc2-567b2d5cbd70
   :DATE:     2010-12-13
   :END:
#+begin_src org :results latex :tangle latex-err.tex
  ,one
  ,two
  ,three
#+end_src

#+begin_src org :results latex :results replace
  ,- eric
  ,- schulte
#+end_src

#+results:
#+BEGIN_LaTeX
\begin{itemize}
\item eric
\item schulte
\end{itemize}
#+END_LaTeX

   </pre>
   </content>
</entry>
<entry>
   <title>tangle-templates</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-13-tangle-templates.html"/>
   <updated>2010-12-13:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-13-tangle-templates.html</id>
   <content type="html">
   <pre>
** tangle templates
   :PROPERTIES:
   :DATE:     2010-12-13
   :END:
#+source: template-heading
#+begin_src emacs-lisp
  some stuff here
#+end_src

#+source: template-footing
#+begin_src emacs-lisp
  some other stuff here
#+end_src

#+source: template
#+begin_src sh :results output :noweb yes :var body="body stuff"
heading=$(cat&lt;&lt;EOF
&lt;&lt;template-heading&gt;&gt;
EOF
)
footing=$(cat&lt;&lt;EOF
&lt;&lt;template-footing&gt;&gt;
EOF
)
echo $heading
echo "$body"
echo $footing
#+end_src

#+call: template[:noweb yes](body="something new")

#+results: template[:noweb yes](body="something new")
: some stuff here
: something new
: some other stuff here

   </pre>
   </content>
</entry>
<entry>
   <title>utf8-and-latin-1-encodings</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-13-utf8-and-latin-1-encodings.html"/>
   <updated>2010-12-13:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-13-utf8-and-latin-1-encodings.html</id>
   <content type="html">
   <pre>
** utf8 and latin-1 encodings
   :PROPERTIES:
   :DATE:     2010-12-13
   :END:
#+tblname: toto
| &#233; |

#+begin_src python :var t=toto :preamble # -*- coding: latin1 -*- :return [len(babel), len(local)]
  babel = unicode (t[0][0],"latin1")
  local = unicode ("&#233;","latin1")
#+end_src

#+results:
| 2 | 2 |

   </pre>
   </content>
</entry>
<entry>
   <title>new-file-handling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-20-new-file-handling.html"/>
   <updated>2010-12-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-20-new-file-handling.html</id>
   <content type="html">
   <pre>
** new file handling
   :PROPERTIES:
   :DATE:     2010-12-20
   :END:

#+begin_src sh :sep , :file dirlisting
  ls -l
#+end_src

#+results:
[[file:dirlisting]]

#+begin_src ruby :file ruby-out
  [[1, 2, 3, 4],
   [2, 4, 6, 8]]
#+end_src

#+results:
[[file:ruby-out]]

#+begin_src emacs-lisp :results file :results append
  (let ((today (replace-regexp-in-string "[ \t]" "-" (current-time-string))))
    (with-temp-file today
      (insert (message "I'm feeling %s"
                       (nth (random 3) (list "good" "bad" "just fine")))))
    today)
#+end_src

#+results:
[[file:Mon-Dec-20-17:27:52-2010]]

from http://www.graphviz.org/Gallery/directed/fsm.gv.txt
#+begin_src dot :file fsa.png
  digraph finite_state_machine {
          rankdir=LR;
          size="8,5"
          node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
          node [shape = circle];
          LR_0 -&gt; LR_2 [ label = "SS(B)" ];
          LR_0 -&gt; LR_1 [ label = "SS(S)" ];
          LR_1 -&gt; LR_3 [ label = "S($end)" ];
          LR_2 -&gt; LR_6 [ label = "SS(b)" ];
          LR_2 -&gt; LR_5 [ label = "SS(a)" ];
          LR_2 -&gt; LR_4 [ label = "S(A)" ];
          LR_5 -&gt; LR_7 [ label = "S(b)" ];
          LR_5 -&gt; LR_5 [ label = "S(a)" ];
          LR_6 -&gt; LR_6 [ label = "S(b)" ];
          LR_6 -&gt; LR_5 [ label = "S(a)" ];
          LR_7 -&gt; LR_8 [ label = "S(b)" ];
          LR_7 -&gt; LR_5 [ label = "S(a)" ];
          LR_8 -&gt; LR_6 [ label = "S(b)" ];
          LR_8 -&gt; LR_5 [ label = "S(a)" ];
  }
#+end_src

#+results:
[[file:fsa.png]]
   </pre>
   </content>
</entry>
<entry>
   <title>eval-query</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2010-12-21-eval-query.html"/>
   <updated>2010-12-21:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2010-12-21-eval-query.html</id>
   <content type="html">
   <pre>
** eval query
   :PROPERTIES:
   :DATE:     2010-12-21
   :END:
#+begin_src emacs-lisp
  (setq org-confirm-babel-evaluate
        (lambda (lang body) (not (equal "ditaa" lang))))
#+end_src

#+results:
| lambda | (lang body) | (not (equal ditaa lang)) |

#+begin_src emacs-lisp :eval query
  (message "eval'd")
#+end_src

#+results:
: eval'd

#+begin_src ditaa
  ---
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>language-name-abbreviations</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-07-language-name-abbreviations.html"/>
   <updated>2011-01-07:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-07-language-name-abbreviations.html</id>
   <content type="html">
   <pre>
** language name abbreviations
   :PROPERTIES:
   :DATE:     2011-01-07
   :END:

#+begin_src emacs-lisp
  (add-to-list 'org-src-lang-modes '("clj" . clojure))
#+end_src

#+begin_src clj
  (map (partial + 1) (range 20))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>call-lines</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-11-call-lines.html"/>
   <updated>2011-01-11:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-11-call-lines.html</id>
   <content type="html">
   <pre>
** call lines
   :PROPERTIES:
   :DATE:     2011-01-11
   :END:
#+source: doubler
#+begin_src emacs-lisp :var n=2
  (* n 2)
#+end_src

#+call: doubler(n=3)

#+results: doubler(n=3)
: 6

#+call: doubler[:var n=3]()

#+results: doubler[:var n=3]()
: 6

   </pre>
   </content>
</entry>
<entry>
   <title>empty-strings-as-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-11-empty-strings-as-arguments.html"/>
   <updated>2011-01-11:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-11-empty-strings-as-arguments.html</id>
   <content type="html">
   <pre>
** empty strings as arguments
   :PROPERTIES:
   :DATE:     2011-01-11
   :END:

#+begin_src emacs-lisp :results output :var foo=""
  (concat foo "bar")
#+end_src

#+results:
: bar

   </pre>
   </content>
</entry>
<entry>
   <title>noweb-then-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-13-noweb-then-variables.html"/>
   <updated>2011-01-13:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-13-noweb-then-variables.html</id>
   <content type="html">
   <pre>
** noweb then variables
   :PROPERTIES:
   :DATE:     2011-01-13
   :END:
#+source: replaced-first
#+begin_src latex
  \begin{itemize}
  \item first
  \item data
  \item third
  \end{itemize}
#+end_src

#+begin_src latex :var data="second" :noweb yes
  \section{ordinals}
  \label{sec:ordinals}
  &lt;&lt;replaced-first&gt;&gt;
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>replace-inline-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-13-replace-inline-code-block.html"/>
   <updated>2011-01-13:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-13-replace-inline-code-block.html</id>
   <content type="html">
   <pre>
** replace inline code block
   :PROPERTIES:
   :DATE:     2011-01-13
   :END:
This is src_emacs-lisp{(+ 1 2 3)} an inline block.

#+begin_src emacs-lisp
  (defun replace-inline-block ()
    (interactive)
    (if (save-excursion (re-search-backward "[ \f\t\n\r\v]" nil t)
                        (looking-at org-babel-inline-src-block-regexp))
        (replace-match
         ((lambda (el) (if (stringp el) el (format "%S" el)))
          (org-babel-execute-src-block)) nil nil nil 1)
      (error "not inside of an inline source block.")))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>wrap-noweb-references-in-comments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-16-wrap-noweb-references-in-comments.html"/>
   <updated>2011-01-16:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-16-wrap-noweb-references-in-comments.html</id>
   <content type="html">
   <pre>
** wrap noweb references in comments
   :PROPERTIES:
   :DATE:     2011-01-16
   :END:
#+source: wrappable
#+begin_src emacs-lisp
  (setq x (+ 4 x))
#+end_src

#+begin_src emacs-lisp :comments noweb :noweb yes :tangle yes
  (let ((x 1))
    (message "x=%s" x)
    &lt;&lt;wrappable&gt;&gt;
    (message "x=%s" x))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>passing-arguments-to-the-shell</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-18-passing-arguments-to-the-shell.html"/>
   <updated>2011-01-18:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-18-passing-arguments-to-the-shell.html</id>
   <content type="html">
   <pre>
** passing arguments to the shell
   :PROPERTIES:
   :DATE:     2011-01-18
   :END:
#+results: something
: eric
:   schulte
:     yes
: more

#+results: something-list
| 1 |
| 2 |
| 3 |

#+begin_src sh :var data=something-list
  echo "$data"|wc -l
#+end_src

#+results:
: 3

#+begin_src emacs-lisp :results silent
  (setq org-babel-sh-var-quote-fmt "`cat &lt;&lt;'BABEL_TABLE'\n%s\nBABEL_TABLE\n`")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>creating-a-directory-when-needed-for-tangling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-19-creating-a-directory-when-needed-for-tangling.html"/>
   <updated>2011-01-19:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-19-creating-a-directory-when-needed-for-tangling.html</id>
   <content type="html">
   <pre>
** creating a directory when needed for tangling
   :PROPERTIES:
   :DATE:     2011-01-19
   :END:
#+begin_src clojure :tangle (prog1 "src/foo.clj" (make-directory "src" "."))
  (ns something)
#+end_src

a helper function for the above
#+begin_src emacs-lisp
  (defun mkdir-p (file &amp;optional dir)
    "Create any parent directories of FILE if missing and return FILE."
    (make-directory (file-name-directory file) (or dir ".")) file)
#+end_src

allows the following
#+begin_src clojure :tangle (mkdir-p "src/foo.clj")
  (ns something)
#+end_src

There is now a new header argument controlling this behavior
#+begin_src emacs-lisp :mkdirp yes :tangle novel/nested/directories/finally.clj
  (message "contents")
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>inserting-wrappers-eats-following-characters</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-20-inserting-wrappers-eats-following-characters.html"/>
   <updated>2011-01-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-20-inserting-wrappers-eats-following-characters.html</id>
   <content type="html">
   <pre>
** inserting wrappers eats following characters
   :PROPERTIES:
   :DATE:     2011-01-20
   :END:
*** Test
    :PROPERTIES:
    :DATE:     2011-01-20
    :END:
  
  #+begin_src emacs-lisp :results latex
    "\\begin{equation}\\frac{1}{2}\n\\end{equation}"
  #+end_src

  #+results:
  #+BEGIN_LaTeX
  \begin{equation}\frac{1}{2}
  \end{equation}
  #+END_LaTeX
  
*** Watch me die :-(
    :PROPERTIES:
    :DATE:     2011-01-20
    :END:

   </pre>
   </content>
</entry>
<entry>
   <title>results-replace-not-always-working</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-25-results-replace-not-always-working.html"/>
   <updated>2011-01-25:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-25-results-replace-not-always-working.html</id>
   <content type="html">
   <pre>
** results replace not always working
   :PROPERTIES:
   :DATE:     2011-01-25
   :END:
#+begin_src sh :results output org replace :exports code
  for i in `seq 4`;do
      echo "- place $i in the list"
  done
#+end_src

#+results:
#+BEGIN_ORG
- place 1 in the list
- place 2 in the list
- place 3 in the list
- place 4 in the list
#+END_ORG

inline block src_emacs-lisp[:exports code :results replace]{(+ 1 1 1)} here is was

   </pre>
   </content>
</entry>
<entry>
   <title>simple-calc-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-25-simple-calc-example.html"/>
   <updated>2011-01-25:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-25-simple-calc-example.html</id>
   <content type="html">
   <pre>
** simple calc example
   :PROPERTIES:
   :DATE:     2011-01-25
   :END:
#+begin_src calc 
2*3
#+end_src

#+results:
: 6

   </pre>
   </content>
</entry>
<entry>
   <title>non-inlined-inline-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-01-27-non-inlined-inline-code-block.html"/>
   <updated>2011-01-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-01-27-non-inlined-inline-code-block.html</id>
   <content type="html">
   <pre>
** non-inlined inline code block
   :PROPERTIES:
   :DATE:     2011-01-27
   :END:
The Date is src_sh[:results replace]{date} at the time of =this= export.

src_sh[:results replace]{ls}

   </pre>
   </content>
</entry>
<entry>
   <title>how-to-set-no-expand-in-properties</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-10-how-to-set-no-expand-in-properties.html"/>
   <updated>2011-02-10:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-10-how-to-set-no-expand-in-properties.html</id>
   <content type="html">
   <pre>
** how to set no-expand in properties
   :PROPERTIES:
   :no-expand: yes
   :DATE:     2011-02-10
   :END:

#+begin_src emacs-lisp :var something="other thing" :tangle no-expand.el
  :test
#+end_src

tangles to

   </pre>
   </content>
</entry>
<entry>
   <title>two-vars-in-a-properties-block----not-possible</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-10-two-vars-in-a-properties-block----not-possible.html"/>
   <updated>2011-02-10:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-10-two-vars-in-a-properties-block----not-possible.html</id>
   <content type="html">
   <pre>
** two vars in a properties block -- not possible
   :PROPERTIES:
   :var:      test1=7
   :var:      test2=8
   :DATE:     2011-02-10
   :END:

#+begin_src emacs-lisp
  (message "test1=%S test2=%S" test1 test2)
#+end_src

results in Error
: let: Symbol's value as variable is void: test2

*** an alternative
    :PROPERTIES:
    :var:      tests=all-tests
    :DATE:     2011-02-10
    :END:

#+tblname: all-tests
- 7
- 8

#+begin_src emacs-lisp :var eric=89
  (message "test1=%S test2=%S" (first tests) (second tests))
#+end_src

#+results:
: test1=7 test2=8

*** another alternative
    :PROPERTIES:
    :var:      vars=variables
    :DATE:     2011-06-21
    :END:

#+tblname: variables
| var1 | 1 |
| var2 | 2 |

#+begin_src python
  print vars[0][1]
  print vars[1][1]
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>passing-keywords-inside-header-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-15-passing-keywords-inside-header-arguments.html"/>
   <updated>2011-02-15:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-15-passing-keywords-inside-header-arguments.html</id>
   <content type="html">
   <pre>
** passing keywords inside header arguments
   :PROPERTIES:
   :DATE:     2011-02-15
   :END:

#+begin_src emacs-lisp :var lst='(:no-expand :other)
  lst
#+end_src

#+results:
| :no-expand | other |

   </pre>
   </content>
</entry>
<entry>
   <title>recutils</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-15-recutils.html"/>
   <updated>2011-02-15:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-15-recutils.html</id>
   <content type="html">
   <pre>
** recutils
   :PROPERTIES:
   :DATE:     2011-02-15
   :END:
#+begin_src sh :file book.rec
  cat &lt;&lt;EOF &gt; book.rec
  # -*- mode: rec -*-
  %rec: Book
  %mandatory: Title
  %type: Location enum loaned home unknown
  %doc:
  + A book in my personal collection.
  
  Title: GNU Emacs Manual
  Author: Richard M. Stallman
  Publisher: FSF
  Location: home
  
  Title: The Colour of Magic
  Author: Terry Pratchett
  Location: loaned
  
  Title: Mio Cid
  Author: Anonymous
  Location: home
  
  Title: chapters.gnu.org administration guide
  Author: Nacho Gonzalez
  Author: Jose E. Marchesi
  Location: unknown
  
  Title: Yeelong User Manual
  Location: home
  
  # End of books.rec
  EOF
#+end_src

#+results:
[[file:book.rec]]

#+begin_src rec :data book.rec :fields Title,Author
  Location = 'loaned'
#+end_src

#+results:
| Title               | Author          |
| The Colour of Magic | Terry Pratchett |

#+begin_src rec :data book.rec :fields Title,Author
  
#+end_src

#+results:
| Title                                 | Author              | Author_2         |
| GNU Emacs Manual                      | Richard M. Stallman |                  |
| The Colour of Magic                   | Terry Pratchett     |                  |
| Mio Cid                               | Anonymous           |                  |
| chapters.gnu.org administration guide | Nacho Gonzalez      | Jose E. Marchesi |
| Yeelong User Manual                   |                     |                  |

   </pre>
   </content>
</entry>
<entry>
   <title>sql-----example-reading-org-mode-table-into-sql</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-15-sql-----example-reading-org-mode-table-into-sql.html"/>
   <updated>2011-02-15:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-15-sql-----example-reading-org-mode-table-into-sql.html</id>
   <content type="html">
   <pre>
** SQL --- example reading org-mode table into sql
   :PROPERTIES:
   :DATE:     2011-02-15
   :END:
#+tblname: example-table-for-sql
| a |  b |
|---+----|
| 1 | 10 |
| 2 | 11 |
| 3 | 12 |
| 4 | 13 |
| 5 | 14 |
| 6 | 15 |

#+headers: :var table=example-table-for-sql
#+begin_src sql :engine mysql
load data infile "$table" into mytable;
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>inline-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-18-inline-code-block.html"/>
   <updated>2011-02-18:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-18-inline-code-block.html</id>
   <content type="html">
   <pre>
** inline code block
   :PROPERTIES:
   :DATE:     2011-02-18
   :END:

here is an inline block src_R{1+1}

   </pre>
   </content>
</entry>
<entry>
   <title>export-of-inline-code-blocks-which-are-silent</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-20-export-of-inline-code-blocks-which-are-silent.html"/>
   <updated>2011-02-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-20-export-of-inline-code-blocks-which-are-silent.html</id>
   <content type="html">
   <pre>
** export of inline code blocks which are silent
   :PROPERTIES:
   :DATE:     2011-02-20
   :END:
#+begin_src emacs-lisp :results silent
  (setf org-babel-default-inline-header-args
        '((:session . "none")
          (:results . (if (boundp 'org-current-export-file) "replace" "silent"))
          (:exports . "results")))
#+end_src

Here is an inline code block src_sh{echo 8} &lt;- there

   </pre>
   </content>
</entry>
<entry>
   <title>mentions-of-file-names-in-file-contents</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-20-mentions-of-file-names-in-file-contents.html"/>
   <updated>2011-02-20:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-20-mentions-of-file-names-in-file-contents.html</id>
   <content type="html">
   <pre>
** mentions of file names in file contents
   :PROPERTIES:
   :DATE:     2011-02-20
   :END:
directory to search
#+results: graph-dir
: graph-dir

list all files in dir
#+source: graph-files
#+begin_src sh :results vector :var dir=graph-dir
  find $dir -type f -exec basename {} \;
#+end_src

#+results: graph-files
| other |
| dan   |
| eric  |
| seb   |

association of files with mentions
#+source: graph-associations
#+begin_src sh :var dir=graph-dir :var files=graph-files
  for i in $files; do
      for j in `grep -l -r $i $dir`;do
          echo $i, `basename $j`
      done
  done
#+end_src

#+results: graph-associations
| other | eric |
| other | seb  |
| dan   | eric |
| eric  | seb  |
| seb   | dan  |

graphing with dot
#+source: to-dot
#+begin_src sh :var associations=graph-associations :results scalar
  echo "$associations"|awk '{print $1, "-&gt;", $2}'
#+end_src

#+results: to-dot
: other -&gt; eric
: other -&gt; seb
: dan -&gt; eric
: eric -&gt; seb
: seb -&gt; dan

#+begin_src dot :var data=to-dot :file files.png
  digraph G{
    $data
  }
#+end_src

#+results:
[[file:files.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>catch-the-file-name-during-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-21-catch-the-file-name-during-export.html"/>
   <updated>2011-02-21:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-21-catch-the-file-name-during-export.html</id>
   <content type="html">
   <pre>
** catch the file name during export
   :PROPERTIES:
   :DATE:     2011-02-21
   :END:

#+begin_src emacs-lisp :var file-name=(buffer-file-name) :exports both
  file-name
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>new-lists</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-21-new-lists.html"/>
   <updated>2011-02-21:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-21-new-lists.html</id>
   <content type="html">
   <pre>
** new lists
   :PROPERTIES:
   :DATE:     2011-02-21
   :END:
*** results embedded inside of a list
    :PROPERTIES:
    :DATE:     2011-02-22
    :END:
1. this has results
   #+results: something-in-a-list
   : foo
2. and this doesn't work
   #+begin_src emacs-lisp :var data=something-in-a-list
     data
   #+end_src

   #+results:
   : foo

*** reading and writing
    :PROPERTIES:
    :DATE:     2011-02-22
    :END:
#+results: simple-list
- 1
- two
- 3
- four


#+source: simple-list
#+begin_src emacs-lisp :var lst=simple-list :results list
  (reverse lst)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>calc-variables-inside-of-parenthesis</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-22-calc-variables-inside-of-parenthesis.html"/>
   <updated>2011-02-22:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-22-calc-variables-inside-of-parenthesis.html</id>
   <content type="html">
   <pre>
** calc variables inside of parenthesis
   :PROPERTIES:
   :DATE:     2011-02-22
   :END:
#+BEGIN_SRC calc :var testvar=9000
testvar - 200
#+END_SRC

#+results:
: 8800

#+BEGIN_SRC calc :var testvar=9000
(testvar - 200) 800
#+END_SRC

#+results:
: 7040000

   </pre>
   </content>
</entry>
<entry>
   <title>sh-return-a-list-of-elements-with-spaces</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-26-sh-return-a-list-of-elements-with-spaces.html"/>
   <updated>2011-02-26:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-26-sh-return-a-list-of-elements-with-spaces.html</id>
   <content type="html">
   <pre>
** sh return a list of elements with spaces
   :PROPERTIES:
   :DATE:     2011-02-26
   :END:
#+begin_src sh :results list
  echo "eric schulte"
  echo "dan davison"
  echo "seb vauban"
#+end_src

#+results:
- ("eric" "schulte")
- ("dan" "davison")
- ("seb" "vauban")

#+begin_src sh :results scalar
  echo "eric schulte"
  echo "dan davison"
  echo "seb vauban"
#+end_src

#+results:
: eric schulte
: dan davison
: seb vauban

   </pre>
   </content>
</entry>
<entry>
   <title>simple-python-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-26-simple-python-block.html"/>
   <updated>2011-02-26:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-26-simple-python-block.html</id>
   <content type="html">
   <pre>
** simple python block
   :PROPERTIES:
   :DATE:     2011-02-26
   :END:
#+begin_src python :return foo
  foo = 8
  foo += 1
#+end_src

#+results:
: 9

   </pre>
   </content>
</entry>
<entry>
   <title>source-block-names-in-current-buffer</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-26-source-block-names-in-current-buffer.html"/>
   <updated>2011-02-26:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-26-source-block-names-in-current-buffer.html</id>
   <content type="html">
   <pre>
** source block names in current buffer
   :PROPERTIES:
   :DATE:     2011-02-26
   :END:
#+begin_src emacs-lisp :results list
 (org-babel-src-block-names)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>dont-interpret-tuples-as-elisp-code</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-dont-interpret-tuples-as-elisp-code.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-dont-interpret-tuples-as-elisp-code.html</id>
   <content type="html">
   <pre>
** don't interpret tuples as elisp code
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:
#+begin_src python :results value
  return (1,2)
#+end_src

#+results:
: (1, 2)

   </pre>
   </content>
</entry>
<entry>
   <title>exporting-cache-and-noweb</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-exporting-cache-and-noweb.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-exporting-cache-and-noweb.html</id>
   <content type="html">
   <pre>
** exporting cache and noweb
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:
#+srcname: test_sleep
#+begin_src R :session :exports code
  Sys.sleep(time=5)
  1:10
#+end_src

#+srcname: test_sleep
#+begin_src R :session :exports results :noweb yes :cache yes
  &lt;&lt;test_sleep&gt;&gt;
#+end_src

#+results[e2c9e6c2f84563b590a765502057d92463e50182]: test_sleep
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

   </pre>
   </content>
</entry>
<entry>
   <title>new-block-regexp-tests</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-new-block-regexp-tests.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-new-block-regexp-tests.html</id>
   <content type="html">
   <pre>
** new block regexp tests
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:
*** Block 1 (Exports OK)
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out
Block 1
#+END_SRC

*** Block 2 (Exports OK - double blank line no white-space in Block)
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out


#+END_SRC

*** Block 3 (Fails - single blank line no white-space in Block)
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out

#+END_SRC

*** Block 4 (Gets consumed by previous Block)
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out
Block 4
#+END_SRC

*** Block 5 (Fails - no lines in Block)
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out
#+END_SRC

*** Block 6 (Gets consumed by previous Block
    :PROPERTIES:
    :DATE:     2011-02-27
    :END:

#+BEGIN_SRC sh :tangle test-out
Block 6
#+END_SRC

   </pre>
   </content>
</entry>
<entry>
   <title>pass-a-vector-to-calc</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-pass-a-vector-to-calc.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-pass-a-vector-to-calc.html</id>
   <content type="html">
   <pre>
** pass a vector to calc
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:

#+begin_src calc :var y=[1 2 3]
  y
#+end_src

#+results:
: [1 2 3]

#+begin_src calc :var y=[1 2 3]
  3 y
#+end_src

#+results:
: [3, 6, 9]

#+begin_src emacs-lisp :var data=[1 2 3]
  (elt data 1)
#+end_src

#+results:
: 2

#+begin_src calc
  1 * 8
#+end_src

#+results:
: 8

   </pre>
   </content>
</entry>
<entry>
   <title>passing-elisp-looking-variables-to-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-passing-elisp-looking-variables-to-code-blocks.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-passing-elisp-looking-variables-to-code-blocks.html</id>
   <content type="html">
   <pre>
** passing elisp-looking variables to code blocks
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:
#+begin_src perl :var it="(+ 1 1)" :results output
  printf "passed in %s", $it
#+end_src

#+results:
: passed in (+ 1 1)

#+results: elisp-looking-table
| 1 | (+ 1 1) |
| 2 | (a b c) |
| 3 | (+ 3 3) |

#+begin_src perl :var data=elisp-looking-table[1,1]
  $data
#+end_src

#+results:
: (a b c)

#+begin_src emacs-lisp :var data=elisp-looking-table[1,1]
  data
#+end_src

#+results:
: (a b c)

   </pre>
   </content>
</entry>
<entry>
   <title>strip-hline-before-processing-a-variables-indices</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-27-strip-hline-before-processing-a-variables-indices.html"/>
   <updated>2011-02-27:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-27-strip-hline-before-processing-a-variables-indices.html</id>
   <content type="html">
   <pre>
** strip hline before processing a variables indices
   :PROPERTIES:
   :DATE:     2011-02-27
   :END:
#+results: table-w-hline
| 1 | a |
|---+---|
| 2 | b |
| 3 | c |
| 4 | d |

#+begin_src emacs-lisp :var table=table-w-hline[1,1] :hlines no
  table
#+end_src

#+results:
: hline

#+tblname: perl-table-w-hline
| colA | colB |
|------+------|
| a1   | b1   |
| a2   | b2   |

#+headers: :var b=perl-table-w-hline[2..,1]
#+headers: :var a=perl-table-w-hline[2..,0]
#+begin_src perl :tangle yes
  $a; $b;
#+end_src 

   </pre>
   </content>
</entry>
<entry>
   <title>literal-reference-in-a-table-with-sbe</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-28-literal-reference-in-a-table-with-sbe.html"/>
   <updated>2011-02-28:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-28-literal-reference-in-a-table-with-sbe.html</id>
   <content type="html">
   <pre>
** literal reference in a table with sbe
   :PROPERTIES:
   :DATE:     2011-02-28
   :END:

| "eric schulte" | 12 |
#+TBLFM: @1$2='(sbe length (in $1))

#+source: length
#+begin_src emacs-lisp :var in="foo"
  (length in)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>reference-to-a-commented-out-subtree</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-02-28-reference-to-a-commented-out-subtree.html"/>
   <updated>2011-02-28:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-02-28-reference-to-a-commented-out-subtree.html</id>
   <content type="html">
   <pre>
** reference to a commented out subtree
   :PROPERTIES:
   :DATE:     2011-02-28
   :END:
*** COMMENT I don't export
    :PROPERTIES:
    :DATE:     2011-02-28
    :END:
#+results: hidden-parameters
| 1 |
| 2 |
| 3 |
| 4 |

*** I do export
    :PROPERTIES:
    :DATE:     2011-02-28
    :END:
#+begin_src emacs-lisp :var params=hidden-parameters :exports both
  params
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>leading-trailing-spaces</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-02-leading-trailing-spaces.html"/>
   <updated>2011-03-02:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-02-leading-trailing-spaces.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** leading/trailing spaces</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-02</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+results: spaces-wrapped-string
</span>- " pass through with space "


<span class="org-block-begin-line">#+begin_src emacs-lisp :var res=spaces-wrapped-string[0]
</span>  res
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">:  pass through with space 
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>results-org-raw-wrap</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-02-results-org-raw-wrap.html"/>
   <updated>2011-03-02:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-02-results-org-raw-wrap.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** results org raw wrap</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-02</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sh :results output org :exports none
</span>  cat &lt;&lt;EOF
  - first
  - second
  EOF
<span class="org-block-end-line">#+end_src
</span>
#+results:
#+BEGIN_ORG
- first
- second
#+END_ORG

*** Version 1
    :PROPERTIES:
    :DATE:     2011-03-02
    :END:
This version only prints the org code for the table, but does not interprets it.
#+begin_src R :exports both :results output raw
  cat(
      "|--|--|\n",
      "|name|[[./pdf1.pdf]]|\n",
      "|--|--|\n"
      )
#+end_src

*** Version 2
    :PROPERTIES:
    :DATE:     2011-03-02
    :END:
This version prints the table including the graph as expected, but
:results is used twice as a header argument.
#+begin_src R :results output :exports both :results raw
  cat(
      "|--|--|\n",
      "|name|[[./pdf1.pdf]]|\n",
      "|--|--|\n"
      )
#+end_src

*** Version 3
    :PROPERTIES:
    :DATE:     2011-03-02
    :END:
Finally this version does only export the R code
#+begin_src R :exports both :results raw
  cat(
      "|--|--|\n",
      "|name|[[./pdf1.pdf]]|\n",
      "|--|--|\n"
      )
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>export-of-inline-r-code</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-03-export-of-inline-r-code.html"/>
   <updated>2011-03-03:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-03-export-of-inline-r-code.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** export of inline R code</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-03</span>
   :END:
Here I test inline code evaluation in R.

#+begin_src R :session *R*
x &lt;- 100
#+end_src

#+results:
: 100

Now I want to export the value of x, which should be
src_R[:session *R*]{x} .

Did the number 100 show up at the end of the previous sentence on export?

   </pre>
   </content>
</entry>
<entry>
   <title>simple-mysql</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-03-simple-mysql.html"/>
   <updated>2011-03-03:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-03-simple-mysql.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple mysql</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-03</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sql :engine mysql
</span>  show tables;
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>eval-results-as-a-list</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-06-eval-results-as-a-list.html"/>
   <updated>2011-03-06:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-06-eval-results-as-a-list.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** eval results as a list</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-06</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src python :results value
</span>  <span class="keyword">return</span> <span class="string">"(mapcar (lambda (el) (+ 1 el)) '(1 2))"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| 2 | 3 |</span>

<span class="org-block-begin-line">#+begin_src python :results value
</span>  <span class="keyword">return</span> <span class="string">"[1, 2]"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| 1 | 2 |</span>

<span class="org-block-begin-line">#+begin_src python :results value
</span>  <span class="keyword">return </span>[1, 2]
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| 1 | 2 |</span>

<span class="org-block-begin-line">#+begin_src python :results value
</span>  <span class="keyword">return</span> <span class="string">"%r"</span> % <span class="string">"[1 2]"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: [1 2]
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>looks-like-a-pipe-in-a-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-07-looks-like-a-pipe-in-a-table.html"/>
   <updated>2011-03-07:00:00:00-07:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-07-looks-like-a-pipe-in-a-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** looks like a pipe in a table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-07</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: clean
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var in=""
</span>  <span class="starter-kit-paren">(</span><span class="keyword">flet</span> <span class="starter-kit-paren">((</span>clean <span class="starter-kit-paren">(</span>in<span class="starter-kit-paren">)</span>
                <span class="starter-kit-paren">(</span><span class="keyword">if</span> <span class="starter-kit-paren">(</span>listp in<span class="starter-kit-paren">)</span>
                    <span class="starter-kit-paren">(</span>mapcar #'clean in<span class="starter-kit-paren">)</span>
                  <span class="starter-kit-paren">(</span><span class="keyword">if</span> <span class="starter-kit-paren">(</span>stringp in<span class="starter-kit-paren">)</span>
                      <span class="starter-kit-paren">(</span>replace-regexp-in-string <span class="string">"&#166;"</span> <span class="string">"|"</span> in<span class="starter-kit-paren">)</span>
                    in<span class="starter-kit-paren">))))</span>
    <span class="starter-kit-paren">(</span>clean in<span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results: regexps
</span><span class="org-table">| first  | (a&#166;b) |</span>
<span class="org-table">| second | (1&#166;2) |</span>

<span class="org-block-begin-line">#+begin_src perl :var a=clean(in=regexps)[0,1] :var b=clean(in=regexps)[1,1]
</span>  $<span class="variable-name">a</span>; $<span class="variable-name">b;</span>
<span class="org-block-end-line">#+end_src
</span>
#+results:
: (1|2)

   </pre>
   </content>
</entry>
<entry>
   <title>conflicting-header-arguments</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-14-conflicting-header-arguments.html"/>
   <updated>2011-03-14:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-14-conflicting-header-arguments.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** conflicting header arguments</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-14</span>
<span class="org-special-keyword">   :END:</span>

code block
<span class="org-meta-line">#+source: conflict-block
</span><span class="org-block-begin-line">#+begin_src sh :exports results :results silent
</span>  <span class="builtin">echo </span>eric
<span class="org-block-end-line">#+end_src
</span>
call line
<span class="org-meta-line">#+call: conflict-block() :exports results
</span>
<span class="org-meta-line">#+results: conflict-block()
</span><span class="org-code">: eric
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>macros-during-tangling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-14-macros-during-tangling.html"/>
   <updated>2011-03-14:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-14-macros-during-tangling.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** macros during tangling</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:ID:</span>       <span class="org-property-value">d2ff9d6f-b413-4072-91a9-3ae8aa32032c</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-14</span>
<span class="org-special-keyword">   :END:</span>

First, add macro expansion to the new `org-babel-tangle-body-hook'.

<span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>  <span class="starter-kit-paren">(</span>add-hook 'org-babel-tangle-body-hook
            <span class="starter-kit-paren">(</span><span class="keyword">lambda</span> <span class="starter-kit-paren">()</span> <span class="starter-kit-paren">(</span>org-export-preprocess-apply-macros<span class="starter-kit-paren">)))
</span><span class="org-block-end-line">#+end_src
</span>
Then define the macro.  Note: you may need to export the buffer before
tangling so that the macro definition is noticed and processed by
Org-mode.

#+MACRO: CONFIG_PARAM01 45

Then on both export and tangling the macro in the following code block
will be replaced.

#+begin_src sh :tangle yes
  echo org-mode set CONFIG_PARAMETER to: {{{CONFIG_PARAM01}}}
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>caching-on-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-23-caching-on-export.html"/>
   <updated>2011-03-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-23-caching-on-export.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** caching on export</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-23</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: testcache
</span><span class="org-block-begin-line">#+begin_src R :cache yes :exports results
</span>  dat <span class="constant">&lt;- </span> matrix(runif(12), 3, 4)
  print(dat)
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results[e7b83e61596da84f85c5a24e61569576c802f9a2]: testcache
</span><span class="org-table">| 0.590091332094744 | 0.101750465808436 | 0.487125408137217 |  0.92315583024174 |</span>
<span class="org-table">| 0.483292032498866 | 0.427640072302893 | 0.974636133294553 | 0.995571716455743 |</span>
<span class="org-table">|  0.60190233332105 | 0.122638279106468 | 0.437959408387542 | 0.015639441087842 |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>colnames-with-call-lines</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-03-29-colnames-with-call-lines.html"/>
   <updated>2011-03-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-03-29-colnames-with-call-lines.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** colnames with call lines</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-03-29</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+TBLNAME: data
</span><span class="org-table">| x | parameter | value |</span>
<span class="org-table">|---+-----------+-------|</span>
<span class="org-table">| 0 | heat      |    30 |</span>
<span class="org-table">| 1 | heat      |    30 |</span>

<span class="org-meta-line">#+source: func5
</span>#+begin_src R :var name=data :var a="one" :colnames yes
  names(name)
#+end_src

#+results: func5
| x         |
|-----------|
| x         |
| parameter |
| value     |

#+call: func5(name=data, a="two") :colnames yes

#+results: func5(name=data, a="two")
| x         |
|-----------|
| x         |
| parameter |
| value     |

   </pre>
   </content>
</entry>
<entry>
   <title>cl-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-01-cl-example.html"/>
   <updated>2011-04-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-01-cl-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** CL example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-01</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src lisp
</span>  <span class="starter-kit-paren">(</span><span class="keyword">defun</span> <span class="function-name">range</span> <span class="starter-kit-paren">(</span>n <span class="type">&amp;optional</span> m<span class="starter-kit-paren">)</span>
    <span class="doc">"Return the numbers in range."</span>
    <span class="starter-kit-paren">(</span><span class="keyword">loop</span> for num from <span class="starter-kit-paren">(</span><span class="keyword">if</span> m n 0<span class="starter-kit-paren">)</span> to <span class="starter-kit-paren">(</span><span class="keyword">if</span> m m <span class="starter-kit-paren">(</span>- n 1<span class="starter-kit-paren">))</span> collect num<span class="starter-kit-paren">))</span>
  
  <span class="starter-kit-paren">(</span>mapcar #'list <span class="starter-kit-paren">(</span>mapcar #'1+ <span class="starter-kit-paren">(</span>range 10<span class="starter-kit-paren">)))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">|  1 |</span>
<span class="org-table">|  2 |</span>
<span class="org-table">|  3 |</span>
<span class="org-table">|  4 |</span>
<span class="org-table">|  5 |</span>
|  6 |
|  7 |
|  8 |
|  9 |
| 10 |

   </pre>
   </content>
</entry>
<entry>
   <title>detangling-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-01-detangling-example.html"/>
   <updated>2011-04-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-01-detangling-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** detangling example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:tangle:</span>   <span class="org-property-value">yes</span>
   <span class="org-special-keyword">:comments:</span> <span class="org-property-value">yes</span>
   <span class="org-special-keyword">:shebang:</span>  <span class="org-property-value">#!/bin/sh</span>
   <span class="org-special-keyword">:ID:</span>       <span class="org-property-value">7a22cf71-6be3-4fca-a700-4c8be8237303</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-01</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: sh-for-tangling
</span><span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo</span> <span class="string">"this is the `sh-for-tangling' code block"</span>
  <span class="variable-name">num</span>=<span class="sh-quoted-exec">`expr 1 + 1`</span>
  <span class="builtin">echo</span> <span class="string">"the value of num is $num"
</span><span class="org-block-end-line">#+end_src
</span>
#+begin_src sh
  echo "this is an unnamed code block"
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>grabbing-the-current-buffer-during-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-01-grabbing-the-current-buffer-during-export.html"/>
   <updated>2011-04-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-01-grabbing-the-current-buffer-during-export.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** grabbing the current buffer during export</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-01</span>
<span class="org-special-keyword">   :END:</span>
Eric

<span class="org-block-begin-line">#+begin_src emacs-lisp :var buf=(buffer-file-name (current-buffer)) :exports both
</span>  <span class="starter-kit-paren">(</span>message <span class="string">"buffer %S!"</span> buf<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src sh :exports results :results output
</span>  git log -1
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>tangling-out-vc-information</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-01-tangling-out-vc-information.html"/>
   <updated>2011-04-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-01-tangling-out-vc-information.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** tangling out vc information</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-01</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+headers: :var STATE=(vc-state (or (buffer-file-name) org-current-export-file))
#+headers: :var REV=(vc-working-revision (or (buffer-file-name) org-current-export-file))
</span><span class="org-block-begin-line">#+begin_src sh :tangle yes
</span>  rm -rf ./R
  rm -f ./spreadSim.sub
  <span class="variable-name">REVISION</span>=$<span class="variable-name">REV</span>.$<span class="variable-name">STATE</span>
  tar -xf nsa.$<span class="variable-name">REVISION</span>.tar.gz
  $<span class="variable-name">HOME</span>/R/R/R-2.12.0/bin/Rscript --vanilla -e
<span class="string">"source('./R/generateLatinHypercubeScenarios.R'); doIt()"</span>
  <span class="keyword">for</span> SCENARIO<span class="keyword"> in</span> ./R/scenarios/*.R; <span class="keyword">do</span>
    <span class="builtin">export</span> <span class="variable-name">SCENARIO</span>=${<span class="variable-name">SCENARIO</span>#./R/scenarios/}
    qsub nsa.sub
  <span class="keyword">done
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>vc-log</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-01-vc-log.html"/>
   <updated>2011-04-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-01-vc-log.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** vc-log</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-01</span>
<span class="org-special-keyword">   :END:</span>

A version control log of this file.  The <span class="org-code">=vc-log=</span> code block lives in
the library of babel.
<span class="org-meta-line">#+call: vc-log() :exports results
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>session-associated-with-r-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-02-session-associated-with-r-block.html"/>
   <updated>2011-04-02:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-02-session-associated-with-r-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** session associated with R block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-02</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src R :session *chris*
</span>  x <span class="constant">&lt;-</span> 1
  y <span class="constant">&lt;- </span>2
  y-x
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 1
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>headers-in-r-tables-during-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-04-headers-in-r-tables-during-export.html"/>
   <updated>2011-04-04:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-04-headers-in-r-tables-during-export.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** headers in R tables during export</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-04</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+TBLNAME: Chuah07
</span><span class="org-table">| condition | Mean.offer |</span>
<span class="org-table">|-----------+------------|</span>
<span class="org-table">| 1.MMM     |      48.49 |</span>
<span class="org-table">| 2.MMU     |      42.59 |</span>
<span class="org-table">| 3.MUM     |      44.87 |</span>
<span class="org-table">| 4.UMU     |      46.43 |</span>
<span class="org-table">| 5.UUM     |      44.15 |</span>
<span class="org-table">| 6.UUU     |      43.80 |</span>
<span class="org-table">| MAL       |      46.28 |</span>
<span class="org-table">| UK        |       44.1 |</span>
<span class="org-table">| All       |      45.29 |</span>

<span class="org-meta-line">#+headers: :var data=Chuah07
</span><span class="org-block-begin-line">#+begin_src R :results output :exports both :cache yes
</span>  str(data)
<span class="org-block-end-line">#+end_src
</span>
#+results[135a7f73839b69d118780ca29a64c3840601f7b9]:
: 'data.frame': 9 obs. of  2 variables:
:  $ condition : chr  "1.MMM" "2.MMU" "3.MUM" "4.UMU" ... 
:  $ Mean.offer: num  48.5 42.6 44.9 46.4 44.1 ... eric

   </pre>
   </content>
</entry>
<entry>
   <title>emacs-lisp-printing-with-output-to-string</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-10-emacs-lisp-printing-with-output-to-string.html"/>
   <updated>2011-04-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-10-emacs-lisp-printing-with-output-to-string.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** emacs-lisp printing with output to string</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-10</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :results output
</span>  <span class="starter-kit-paren">(</span><span class="keyword">let</span> <span class="starter-kit-paren">((</span>dog <span class="starter-kit-paren">(</span>sqrt 2<span class="starter-kit-paren">))</span>
        <span class="starter-kit-paren">(</span>cat 7<span class="starter-kit-paren">))</span>
    <span class="starter-kit-paren">(</span>print <span class="starter-kit-paren">(</span>format <span class="string">"%s %f"</span> <span class="string">"Dog: "</span> <span class="starter-kit-paren">(</span>eval dog<span class="starter-kit-paren">)))</span>
    <span class="starter-kit-paren">(</span>print <span class="starter-kit-paren">(</span>format <span class="string">"%s %d"</span> <span class="string">"Cat: "</span> <span class="starter-kit-paren">(</span>eval cat<span class="starter-kit-paren">))</span> nil<span class="starter-kit-paren">)</span>
    <span class="starter-kit-paren">(</span>print <span class="string">"Fish."</span><span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 
: "Dog:  1.414214"
: 
: "Cat:  7"
: 
: "Fish."
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  <span class="starter-kit-paren">(</span><span class="keyword">let</span> <span class="starter-kit-paren">((</span>dog <span class="starter-kit-paren">(</span>sqrt 2<span class="starter-kit-paren">))</span>
        <span class="starter-kit-paren">(</span>cat 7<span class="starter-kit-paren">))</span>
    `<span class="starter-kit-paren">((</span>dog ,dog<span class="starter-kit-paren">)</span>
      <span class="starter-kit-paren">(</span>cat ,cat<span class="starter-kit-paren">)</span>
      <span class="starter-kit-paren">(</span>fish<span class="starter-kit-paren">)))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span>| dog  | 1.4142135623730951 |
| cat  |                  7 |
| fish |                    |

   </pre>
   </content>
</entry>
<entry>
   <title>complex-numbers-in-tables-and-python,-reference-in-table-formula</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-13-complex-numbers-in-tables-and-python,-reference-in-table-formula.html"/>
   <updated>2011-04-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-13-complex-numbers-in-tables-and-python,-reference-in-table-formula.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** complex numbers in tables and python, reference in table formula</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-13</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: parameter-variation(data=0)
</span><span class="org-block-begin-line">#+begin_src python :result values
</span>  <span class="keyword">return</span> <span class="string">'text'
</span><span class="org-block-end-line">#+end_src
</span>
|---------------------------------------|
| "(0.0331901438056,0.000535222885197)" |
| "(0.0333434157791,0.000537930174356)" |
| "(0.0345727512157,0.000559346040457)" |
| "(0.0353146483908,0.000571501584524)" |
| "(0.0355522909393,0.000574387067408)" |
| "(0.0356575682336,0.000574851263615)" |
| "(0.0357806926897,0.000575051685084)" |
|---------------------------------------|
| text                                  |
#+TBLFM: @8$1='(sbe parameter-variation (nums @1$1..@7$1))

| '(1 2 3 4) |
|------------|
|          4 |
#+TBLFM: @2$1='(sbe quote (it @1$1))

| (1 2 3 4) |
|-----------|
| #ERROR    |
#+TBLFM: @2$1='(sbe quote (it @1$1))

*** using vectors to represent complex number is lisp
    :PROPERTIES:
    :DATE:     2011-04-15
    :END:
| [1 2]            |
|------------------|
| real:1 complex:2 |
#+TBLFM: @2$1='(sbe real (it @1$1))

#+source: real(it='())
#+begin_src emacs-lisp
  (format "real:%d complex:%d" (aref it 0) (aref it 1))
#+end_src

*** reference the table in a table formula
    :PROPERTIES:
    :DATE:     2011-04-13
    :END:
#+results: complex-data
|-------------------------------------|
| (0.0331901438056,0.000535222885197) |
|-------------------------------------|
|                                   4 |
#+TBLFM: @2$1='(sbe quote (it "complex-data"))

*** externally referencing the table
    :PROPERTIES:
    :DATE:     2011-04-13
    :END:
#+results: complex-data
|-------------------------------------|
| (0.0331901438056,0.000535222885197) |
| (0.0333434157791,0.000537930174356) |
| (0.0345727512157,0.000559346040457) |
| (0.0353146483908,0.000571501584524) |
| (0.0355522909393,0.000574387067408) |
| (0.0356575682336,0.000574851263615) |
| (0.0357806926897,0.000575051685084) |
#+TBLFM: @8$1='(sbe parameter-variation (nums @1$1..@7$1))

#+begin_src python :var data=complex-data
  return data
#+end_src

#+results:
| (0.0331901438056,0.000535222885197) |
| (0.0333434157791,0.000537930174356) |
| (0.0345727512157,0.000559346040457) |
| (0.0353146483908,0.000571501584524) |
| (0.0355522909393,0.000574387067408) |
| (0.0356575682336,0.000574851263615) |
| (0.0357806926897,0.000575051685084) |

   </pre>
   </content>
</entry>
<entry>
   <title>ocaml-appending-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-19-ocaml-appending-blocks.html"/>
   <updated>2011-04-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-19-ocaml-appending-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** Ocaml appending blocks</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-19</span>
<span class="org-special-keyword">   :END:</span>
block

<span class="org-block-begin-line">#+begin_src ocaml
</span>  <span class="tuareg-font-lock-operator">[|</span>1<span class="tuareg-font-lock-operator">;</span>2<span class="tuareg-font-lock-operator">;</span>3<span class="tuareg-font-lock-operator">|];;
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| 1 | 2 | 3 |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>simple-oz-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-19-simple-oz-example.html"/>
   <updated>2011-04-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-19-simple-oz-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple Oz example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src oz :results output
</span>  {Browse 'Hello'}<span class="org-meta-line">
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>units-in-r-plot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-21-units-in-r-plot.html"/>
   <updated>2011-04-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-21-units-in-r-plot.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** units in R plot</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-21</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src R  :results graphics :file test.png :width 8 :height 8 :res 200 :units cm
</span>  x <span class="constant">&lt;-</span> -10:10
  y <span class="constant">&lt;-</span> x^2
  plot(x, y, type=<span class="string">"l"</span>, col=<span class="string">"red",</span> lty=1)
<span class="org-block-end-line">#+end_src
</span>
#+results:
[[file:test.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>automatic-org-mode-formatting</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-04-27-automatic-org-mode-formatting.html"/>
   <updated>2011-04-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-04-27-automatic-org-mode-formatting.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** automatic org-mode formatting</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-04-27</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: raw-results
</span><span class="org-block-begin-line">#+begin_src sh :results output tabular
</span>  <span class="builtin">echo</span> <span class="string">"| 1 |"</span>
  <span class="builtin">echo</span> <span class="string">"| 2 |"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var in=raw-results
</span>  <span class="starter-kit-paren">(</span>stringp in<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: t
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>inserting-complicated-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-05-inserting-complicated-results.html"/>
   <updated>2011-05-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-05-inserting-complicated-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** inserting complicated results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-05</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results scalar
</span>  <span class="starter-kit-paren">((</span><span class="keyword">lambda</span> <span class="starter-kit-paren">(</span>result<span class="starter-kit-paren">)</span> <span class="starter-kit-paren">(</span><span class="keyword">condition-case</span> nil <span class="starter-kit-paren">(</span>read result<span class="starter-kit-paren">)</span> <span class="starter-kit-paren">(</span><span class="warning">error</span> result<span class="starter-kit-paren">)))</span>
   <span class="string">"(:return
   (:ok \"{:model #&lt;MINLP f(x,y)={(x[0]-5)^2+(x[1]-3)^2-y*sqrt($x),2}&gt;, :v #&lt;Var</span><span class="string"><span class="column-marker-3">i</span></span><span class="string">ables x={ 4.0, 4.0 } y={ 0 }&gt;, :z nil}\")
   13)"</span><span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+results:
| :return | (:ok {:model #&lt;MINLP f(x,y)={(x[0]-5)^2+(x[1]-3)^2-y*sqrt($x),2}&gt;, :v #&lt;Variables x={ 4.0, 4.0 } y={ 0 }&gt;, :z nil}) | 13 |

   </pre>
   </content>
</entry>
<entry>
   <title>simple-latex-verbatim-wrap-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-05-simple-latex-verbatim-wrap-example.html"/>
   <updated>2011-05-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-05-simple-latex-verbatim-wrap-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple latex verbatim wrap example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-05</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>  <span class="starter-kit-paren">(</span>setq org-export-latex-verbatim-wrap
        '<span class="starter-kit-paren">(</span><span class="string">"{\\scriptsize\n\\begin{verbatim}\n"</span> . <span class="string">"\\end{verbatim}\n}\n"</span><span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo</span> eric schulte
  <span class="builtin">echo </span>another
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>new-names-for-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-06-new-names-for-results.html"/>
   <updated>2011-05-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-06-new-names-for-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** new names for results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-06</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+results: simple
</span><span class="org-code">: 1
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var data=simple
</span>  data
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 1
</span>
changing the variable used to label data
<span class="org-block-begin-line">#+begin_src emacs-lisp :results silent
</span>  <span class="starter-kit-paren">(</span>setq org-babel-result-fmt
        <span class="string">"^[ \t]*#\\+</span><span class="string"><span class="regexp-grouping-backslash">\\</span></span><span class="string"><span class="regexp-grouping-construct">(</span></span><span class="string">TBLNAME</span><span class="string"><span class="regexp-grouping-backslash">\\</span></span><span class="string"><span class="regexp-grouping-construct">|</span></span><span class="string">RESNAME</span><span class="string"><span class="regexp-grouping-backslash">\\</span></span><span class="string"><span class="regexp-grouping-construct">|</span></span><span class="string">RESULTS</span><span class="string"><span class="regexp-grouping-backslash">\\</span></span><span class="string"><span class="regexp-grouping-construct">|</span></span><span class="string">DATA</span><span class="string"><span class="regexp-grouping-backslash">\\</span></span><span class="string"><span class="regexp-grouping-construct">)</span></span><span class="string">:[ \t]*%s[ \t]*$"</span><span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+data: not-so-simple
</span><span class="org-code">: 2
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var data=not-so-simple
</span>  data
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 2
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>ocaml</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-06-ocaml.html"/>
   <updated>2011-05-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-06-ocaml.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** ocaml</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   :DATE:     2011-05-06
   :END:

#+begin_src ocaml
  [3;2;3] @ [3;2;3;4;5];;
#+end_src

#+results:
| 3 | 2 | 3 | 3 | 2 | 3 | 4 | 5 |

   </pre>
   </content>
</entry>
<entry>
   <title>append-tables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-14-append-tables.html"/>
   <updated>2011-05-14:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-14-append-tables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** append tables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-14</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+data: table-names
</span>- first-table
- second-table
- third-table

<span class="org-meta-line">#+data: first-table
</span><span class="org-table">| a | 1 |</span>
<span class="org-table">| b | 2 |</span>

<span class="org-meta-line">#+data: second-table
</span><span class="org-table">| c | 3 |</span>
<span class="org-table">| d | 4 |</span>

<span class="org-meta-line">#+data: third-table
</span><span class="org-table">| e | 5 |</span>
<span class="org-table">| f | 6 |</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var table-names=table-names
</span>  <span class="starter-kit-paren">(</span>mapcar #'org-babel-ref-resolve table-names<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+results:
| (a 1) | (b 2) |
| (c 3) | (d 4) |
| (e 5) | (f 6) |

   </pre>
   </content>
</entry>
<entry>
   <title>dont-match-end_src-inside-of-a-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-14-dont-match-end_src-inside-of-a-block.html"/>
   <updated>2011-05-14:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-14-dont-match-end_src-inside-of-a-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** don't match end_src inside of a block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-14</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+srcname: the_issue
</span><span class="org-block-begin-line">#+begin_src sh :results output
</span>  <span class="builtin">echo</span> <span class="string">'#+end_src'
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results: the_issue
</span><span class="org-code">: #+end_src block
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>awk-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-26-awk-example.html"/>
   <updated>2011-05-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-26-awk-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** awk example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-26</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+results: simple-table
</span><span class="org-table">| 1 | 2 | 3 |</span>
<span class="org-table">| 4 | 5 | 6 |</span>
<span class="org-table">| 7 | 8 | 9 |</span>

<span class="org-block-begin-line">#+begin_src awk :stdin simple-table
</span>  {<span class="preprocessor">print </span>$1}
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| 1 |</span>
<span class="org-table">| 4 |</span>
<span class="org-table">| 7 |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>passing-values-through-to-stdin-of-shell-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-26-passing-values-through-to-stdin-of-shell-code-blocks.html"/>
   <updated>2011-05-26:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-26-passing-values-through-to-stdin-of-shell-code-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** passing values through to STDIN of shell code blocks</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-26</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+results: square-table
</span><span class="org-table">| 1 | 2 | 3 |</span>
<span class="org-table">| 4 | 5 | 6 |</span>
<span class="org-table">| 7 | 8 | 9 |</span>

<span class="org-meta-line">#+source: first-col
</span><span class="org-block-begin-line">#+begin_src sh :stdin square-table
</span>  awk <span class="string">'{print $1}'
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src sh :stdin first-col
</span>  sed <span class="string">'s/4/middle/g'
</span><span class="org-block-end-line">#+end_src
</span>
#+results:
|      1 |
| middle |
|      7 |

   </pre>
   </content>
</entry>
<entry>
   <title>example-#+call-line-expansion</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-27-example-#+call-line-expansion.html"/>
   <updated>2011-05-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-27-example-#+call-line-expansion.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** example </span><span class="org-level-2"><span class="org-code">=#+call=</span></span><span class="org-level-2"> line expansion</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-27</span>
<span class="org-special-keyword">   :END:</span>
this code block peeks inside of the `params' variable which is used by
babel during code block evaluation
<span class="org-meta-line">#+source: callee
</span><span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  <span class="comment-delimiter">;; </span><span class="comment">this is cheating and shouldn't be done in user code :)
</span>  <span class="starter-kit-paren">(</span>or <span class="starter-kit-paren">(</span>cdr <span class="starter-kit-paren">(</span>assoc <span class="builtin">:foo</span> params<span class="starter-kit-paren">))</span> 'unset<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
this code block evaluates to the following,
#+results: callee
: unset

this call line,
#+call: callee[:foo bar]() :results org

expands into the following which is evaluated as a normal code block
by Babel.
#+begin_src emacs-lisp :var results=callee[:foo bar]() :results org
  results
#+end_src

this code block evaluates to the following,
#+results:
#+BEGIN_ORG
nothing
#+END_ORG

   </pre>
   </content>
</entry>
<entry>
   <title>lisp-body-with-multiple-forms</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-05-31-lisp-body-with-multiple-forms.html"/>
   <updated>2011-05-31:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-05-31-lisp-body-with-multiple-forms.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** lisp body with multiple forms</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-05-31</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src lisp :results value
</span>  <span class="starter-kit-paren">(</span>format t <span class="string">"~&amp;eric"</span><span class="starter-kit-paren">)</span>
  <span class="starter-kit-paren">(</span>+ 1 2<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 3
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>default-directory-examples-in-lisp</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-01-default-directory-examples-in-lisp.html"/>
   <updated>2011-06-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-01-default-directory-examples-in-lisp.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** default directory examples in lisp</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-01</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src lisp
</span>  *default-pathname-defaults*
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">pwd
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src lisp :dir
</span>  *default-pathname-defaults*
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: #P""
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>testing-new-data-names</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-02-testing-new-data-names.html"/>
   <updated>2011-06-02:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-02-testing-new-data-names.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** testing new data names</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-02</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+data: simple-123
</span><span class="org-code">: 123
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var simple=simple-123 :exports both
</span>  <span class="starter-kit-paren">(</span>* simple 2<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
results

data

my data is results

<span class="org-meta-line">#+results:
</span><span class="org-code">: 246
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>:file-and-python</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-06-:file-and-python.html"/>
   <updated>2011-06-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-06-:file-and-python.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** </span><span class="org-level-2"><span class="org-code">=:file=</span></span><span class="org-level-2"> and python</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-06</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src python :file /tmp/test.png
</span>  <span class="keyword">return </span>1
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-link">[[file:/tmp/test.png]]</span>

   </pre>
   </content>
</entry>
<entry>
   <title>quick-testing-new-session-code</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-06-quick-testing-new-session-code.html"/>
   <updated>2011-06-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-06-quick-testing-new-session-code.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** quick testing new session code</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-06</span>
<span class="org-special-keyword">   :END:</span>
#+begin_src sh :session test :results output
  echo foo
#+end_src

#+results:
: foo

#+begin_src ruby :results output :session simple
  puts "foo"
#+end_src

#+results:
: foo

   </pre>
   </content>
</entry>
<entry>
   <title>simple-shell</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-06-simple-shell.html"/>
   <updated>2011-06-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-06-simple-shell.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple shell</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-06</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sh
</span>  sleep 10 &amp;&amp; ls
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">| _config.yml     |</span>
<span class="org-table">| data            |</span>
<span class="org-table">| development.org |</span>
<span class="org-table">| elsevier        |</span>
<span class="org-table">| index.org       |</span>
<span class="org-table">| paper           |</span>
<span class="org-table">| publish.org     |</span>
<span class="org-table">| scraps          |</span>
<span class="org-table">| scraps.html     |</span>
<span class="org-table">| scraps.org      |</span>
<span class="org-table">| scraps.tex      |</span>

#+begin_src ruby :session eric
  puts [1..4]
#+end_src

#+results:
: nil

   </pre>
   </content>
</entry>
<entry>
   <title>continued-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-10-continued-code-blocks.html"/>
   <updated>2011-06-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-10-continued-code-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** continued code blocks</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:tangle:</span>   <span class="org-property-value">yes</span>
   <span class="org-special-keyword">:comments:</span> <span class="org-property-value">yes</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-10</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: foo
</span><span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  <span class="starter-kit-paren">(</span>message <span class="string">"foo:%S"</span> 1<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+begin_src emacs-lisp
  (message "un-named")
#+end_src

#+source: bar
#+begin_src emacs-lisp
  (message "bar:%S" 1)
#+end_src

#+source: foo
#+begin_src emacs-lisp
  (message "foo:%S" 2)
#+end_src

#+source: bar
#+begin_src emacs-lisp
  (message "bar:%S" 2)
#+end_src

#+begin_src emacs-lisp :tangle no :results silent
  (with-temp-buffer
    (insert-file-contents "scraps.el")
    (eval-buffer))
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>ruby-with-xmpfilter</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-10-ruby-with-xmpfilter.html"/>
   <updated>2011-06-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-10-ruby-with-xmpfilter.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** ruby with xmpfilter</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-10</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src ruby :results xmp code
</span>  2 + 2 <span class="comment-delimiter"># </span><span class="comment">=&gt;
</span>  3.times{ puts <span class="constant">:hello </span>}
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-block-begin-line">#+BEGIN_SRC ruby
</span>2 + 2 <span class="comment-delimiter"># </span><span class="comment">=&gt; 4
</span>3.times{ puts <span class="constant">:hello</span> }
<span class="comment-delimiter"># </span><span class="comment">&gt;&gt; hello
</span><span class="comment-delimiter"># </span><span class="comment">&gt;&gt; hello
</span><span class="comment-delimiter"># </span><span class="comment">&gt;&gt; hello
</span><span class="org-block-end-line">#+END_SRC
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>tangle-test</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-10-tangle-test.html"/>
   <updated>2011-06-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-10-tangle-test.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** tangle test</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-10</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src R :tangle test.R :shebang #!/bin/cat :padline no
</span>This is
a test
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>named-code-block-export</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-13-named-code-block-export.html"/>
   <updated>2011-06-13:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-13-named-code-block-export.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** named code block export</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-13</span>
<span class="org-special-keyword">   :END:</span>
This has a name which is not exported.

<span class="org-meta-line">#+source: rand(n)
</span><span class="org-block-begin-line">#+begin_src R
</span>  runif(n)
<span class="org-block-end-line">#+end_src
</span></pre>
  </body>
</html>
   </pre>
   </content>
</entry>
<entry>
   <title>python-session</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-19-python-session.html"/>
   <updated>2011-06-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-19-python-session.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** python session</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src python :results output :session mypy 
</span><span class="variable-name">x</span> = 1
<span class="keyword">for</span> i <span class="keyword">in</span> <span class="builtin">range</span>(1,5):
  x = x + i
  <span class="keyword">print</span> x

<span class="keyword">print</span> <span class="string">"I throw an error"
</span><span class="org-block-end-line">#+end_src
</span>
#+results:
: 
: ... ... ... 2
: 4
: 7
: 11
: I throw an error

#+begin_src python :results output :session
  print y
#+end_src

#+results:
: Traceback (most recent call last):
:   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
: NameError: name 'y' is not defined

   </pre>
   </content>
</entry>
<entry>
   <title>scalar-emacs-lisp-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-19-scalar-emacs-lisp-results.html"/>
   <updated>2011-06-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-19-scalar-emacs-lisp-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** scalar emacs lisp results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :results scalar
</span>  '<span class="starter-kit-paren">(</span>1 2 3<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: (1 2 3)
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>expand-variable-during-tangling</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-20-expand-variable-during-tangling.html"/>
   <updated>2011-06-20:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-20-expand-variable-during-tangling.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** expand variable during tangling</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:tangle:</span>   <span class="org-property-value">yes</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-20</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src sh :var VER=(vc-working-revision (buffer-file-name))
</span>  <span class="builtin">echo</span> $<span class="variable-name">VER
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>clojure-:results-scalar</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-21-clojure-:results-scalar.html"/>
   <updated>2011-06-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-21-clojure-:results-scalar.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** clojure </span><span class="org-level-2"><span class="org-code">=:results scalar=</span></span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-21</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src clojure :results scalar
</span>  '<span class="starter-kit-paren">(</span>1 2 3<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>large-code-in-inline-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-22-large-code-in-inline-blocks.html"/>
   <updated>2011-06-22:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-22-large-code-in-inline-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** large code in inline blocks</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-22</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: big-block
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :exports none
</span>  <span class="string">"something complex"
</span><span class="org-block-end-line">#+end_src
</span>
Here is some text with src_emacs-lisp[:var it=big-block]{it} in the middle.

   </pre>
   </content>
</entry>
<entry>
   <title>text-and-graphics-from-r</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-24-text-and-graphics-from-r.html"/>
   <updated>2011-06-24:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-24-text-and-graphics-from-r.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** text and graphics from R</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-24</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src R :results output :session
</span>print(seq(1,10))
<span class="org-block-end-line">#+end_src
</span>
<span class="org-block-begin-line">#+begin_src R :file example.png :results graphics :session
</span>plot(seq(1,10))
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-link">[[file:example.png]]</span>

   </pre>
   </content>
</entry>
<entry>
   <title>inline-call-line</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-27-inline-call-line.html"/>
   <updated>2011-06-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-27-inline-call-line.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** inline call line</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   :DATE:     2011-06-27
   :END:

#+source: double
#+begin_src emacs-lisp :var it=0
  (* 2 it)
#+end_src

This is the number src_sh[:var it=double(it=1)]{echo $it} in the middle

The following exports as a normal call line
#+call: double(it=1)

Now here is an inline call call_double(it=1) stuck in the middle of
some prose.

This one should not be exported =call_double(it=2)= because it is
quoted.

Finally this next one should export, even though it starts a line
call_double(it=3) because sometimes inline blocks fold with a
paragraph.

And, a call with raw results call_double(4)[:results raw] should not
have quoted results.

   </pre>
   </content>
</entry>
<entry>
   <title>multiple-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-27-multiple-variables.html"/>
   <updated>2011-06-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-27-multiple-variables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** multiple variables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-27</span>
<span class="org-special-keyword">   :END:</span>

Should work call_concat(1, 2, 3) <span class="org-code">=123=</span> in order.

<span class="org-meta-line">#+source: concat
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var a=0 :var b=0 :var c=0
</span>  <span class="starter-kit-paren">(</span>format <span class="string">"%S%S%S"</span> a b c<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
Should be positive call_lob-minus(4, 3) <span class="org-code">=1=</span> by order.

   </pre>
   </content>
</entry>
<entry>
   <title>un-named-variables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-27-un-named-variables.html"/>
   <updated>2011-06-27:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-27-un-named-variables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** un-named variables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-27</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: square
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var it=0
</span>  <span class="starter-kit-paren">(</span>* it it<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+call: square(8)
</span>
first we can name the argument with call_square(it=4) <span class="org-code">=16=</span>

then we can pass the argument unnamed with call_square(4) <span class="org-code">=16=</span>

<span class="org-meta-line">#+source: minus
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var a=0 :var b=0
</span>  <span class="starter-kit-paren">(</span>- a b<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
To ensure that these arguments are passed in the correct order we can
use the following call_minus(8, 4) <span class="org-code">=-4=</span>

   </pre>
   </content>
</entry>
<entry>
   <title>another-test</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-29-another-test.html"/>
   <updated>2011-06-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-29-another-test.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** another test</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-29</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: square
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var it=0
</span>  <span class="starter-kit-paren">(</span>* it it<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
Here is a call_square(it=4), stuck in the middle of some prose.

Here is another 25^2=call_square(it=25).

   </pre>
   </content>
</entry>
<entry>
   <title>longtable-label-and-attr-lines-on-code-block-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-06-29-longtable-label-and-attr-lines-on-code-block-results.html"/>
   <updated>2011-06-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-06-29-longtable-label-and-attr-lines-on-code-block-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** longtable label and attr lines on code block results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-06-29</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: faz
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :exports results
</span>  '<span class="starter-kit-paren">((</span>foo foo<span class="starter-kit-paren">)</span>
    <span class="starter-kit-paren">(</span>bar baz<span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
#+LABEL: Foo
#+results: faz
| foo | foo |
| bar | baz |

   </pre>
   </content>
</entry>
<entry>
   <title>define-a-block-with-a-name-for-noweb-expansion</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-01-define-a-block-with-a-name-for-noweb-expansion.html"/>
   <updated>2011-07-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-01-define-a-block-with-a-name-for-noweb-expansion.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** define a block with a name for noweb expansion</span>
   :PROPERTIES:
   :tangle:   yes
   :noweb:    yes
   :DATE:     2011-07-01
   :END:

#+source: simple(something="something")
#+begin_src emacs-lisp
  something
#+end_src

another block including the first block
#+begin_src emacs-lisp
  &lt;&lt;simple(something="something else")&gt;&gt;
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>find-a-resource-by-global-id</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-01-find-a-resource-by-global-id.html"/>
   <updated>2011-07-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-01-find-a-resource-by-global-id.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** find a resource by global id</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-01</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var it=990f3218-6fce-44fb-bd0c-5f6076c0dadc
</span>  it
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 
: here it is
</span>
<span class="org-level-3">*** I'm the resource</span>
<span class="org-special-keyword">    :PROPERTIES:</span>
    <span class="org-special-keyword">:ID:</span>       <span class="org-property-value">990f3218-6fce-44fb-bd0c-5f6076c0dadc</span>
    <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-01</span>
<span class="org-special-keyword">    :END:</span>

here it is

   </pre>
   </content>
</entry>
<entry>
   <title>data-alias-for-resname</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-05-data-alias-for-resname.html"/>
   <updated>2011-07-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-05-data-alias-for-resname.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** data alias for resname</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-05</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+data: blah
</span><span class="org-code">: blahcontent
</span>
<span class="org-block-begin-line">#+begin_src emacs-lisp :var it=blah
</span>  it
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: blahcontent
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>indexing-into-a-list-variable</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-06-indexing-into-a-list-variable.html"/>
   <updated>2011-07-06:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-06-indexing-into-a-list-variable.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** indexing into a list variable</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-06</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var lst='(0 1 2)
</span>  <span class="starter-kit-paren">(</span>first lst<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 0
</span>
or as a noweb reference

<span class="org-meta-line">#+data: external-list
</span>- 0
- 1
- 2

<span class="org-block-begin-line">#+begin_src sh :noweb yes
</span>  <span class="builtin">echo </span>&lt;&lt;external-list()[0]&gt;&gt;
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 0
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>eval-never</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-10-eval-never.html"/>
   <updated>2011-07-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-10-eval-never.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** eval never</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-10</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :eval (if org-export-current-backend "never" "yes") :exports results
</span>  <span class="starter-kit-paren">(</span>message <span class="string">"launch missles"</span><span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+results:
: launch missles

   </pre>
   </content>
</entry>
<entry>
   <title>simple-sbe-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-10-simple-sbe-example.html"/>
   <updated>2011-07-10:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-10-simple-sbe-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple sbe example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-10</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-table">|   1 |</span>
<span class="org-table">|   2 |</span>
<span class="org-table">|   3 |</span>
<span class="org-table">|   4 |</span>
<span class="org-table">|   5 |</span>
<span class="org-table">|   6 |</span>
<span class="org-table">| 3.5 |</span>
<span class="org-meta-line">#+TBLFM: @7$1='(sbe mean (lst @1..@6))
</span>
<span class="org-meta-line">#+source: mean
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var lst=()
</span>  <span class="starter-kit-paren">(</span><span class="keyword">let</span> <span class="starter-kit-paren">((</span>num <span class="starter-kit-paren">(</span>car lst<span class="starter-kit-paren">))</span> <span class="starter-kit-paren">(</span>nums <span class="starter-kit-paren">(</span>cdr lst<span class="starter-kit-paren">)))</span>
    <span class="starter-kit-paren">(</span>/ <span class="starter-kit-paren">(</span>float <span class="starter-kit-paren">(</span>+ num <span class="starter-kit-paren">(</span>apply #'+ nums<span class="starter-kit-paren">)))</span> <span class="starter-kit-paren">(</span>1+ <span class="starter-kit-paren">(</span>length nums<span class="starter-kit-paren">))))
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>exporting-a-ditaa-example</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-19-exporting-a-ditaa-example.html"/>
   <updated>2011-07-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-19-exporting-a-ditaa-example.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** exporting a ditaa example</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-19</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src ditaa :file blue.png :cmdline -r
</span>/---------------\
|    test       |
|        {cBLU} |
\---------------/
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-link">[[file:blue.png]]</span>

   </pre>
   </content>
</entry>
<entry>
   <title>including-noweb-refs-without-last-newline</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-19-including-noweb-refs-without-last-newline.html"/>
   <updated>2011-07-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-19-including-noweb-refs-without-last-newline.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** including noweb refs w/o last newline</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sh :noweb yes
</span>  &lt;&lt;my-name&gt;&gt; |<span class="sh-escaped-newline">\</span>
  &lt;&lt;capitalize-name&gt;&gt;
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+source: my-name
</span><span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo</span> <span class="string">"eric schulte"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+source: capitalize-name
</span><span class="org-block-begin-line">#+begin_src sh
</span>  sed <span class="string">'s/^e/E/;s/ s/ S/'
</span><span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>java-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-19-java-code-block.html"/>
   <updated>2011-07-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-19-java-code-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** java code block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src java :classname myfirstjavaprog
</span>  <span class="keyword">class</span> <span class="type">myfirstjavaprog</span>
  {  
      <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">void</span> <span class="function-name">main</span>(<span class="type">String</span> <span class="variable-name">args</span>[])
      {
          System.out.println(<span class="string">"Hello World!")</span>;
      }
  }
<span class="org-block-end-line">#+end_src
</span>
#+results:
: Hello World!

   </pre>
   </content>
</entry>
<entry>
   <title>returning-file-names----interpreted-as-lists</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-21-returning-file-names----interpreted-as-lists.html"/>
   <updated>2011-07-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-21-returning-file-names----interpreted-as-lists.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** returning file names -- interpreted as lists</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-21</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sh :results scalar
</span>  <span class="builtin">echo</span> <span class="string">"[[file:./cv.cls]]"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: [[file:./cv.cls]]
</span>
<span class="org-block-begin-line">#+begin_src sh :results org
</span>   <span class="builtin">echo</span> <span class="string">"[[file:./cv.cls]]"
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-block-begin-line">#+BEGIN_ORG
</span><span class="org-link">[[file:\./cv\.cls]]</span><span class="org-meta-line">
</span><span class="org-block-end-line">#+END_ORG
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>expand-noweb-refs</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-25-expand-noweb-refs.html"/>
   <updated>2011-07-25:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-25-expand-noweb-refs.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** expand noweb refs</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-25</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: def-something
</span>#+begin_src sh
  SOMETHING=nothing
#+end_src

#+begin_src sh
  &lt;&lt;def-something&gt;&gt;
  echo $SOMETHING
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>non-defined-code-blocks-can-still-tangle</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-28-non-defined-code-blocks-can-still-tangle.html"/>
   <updated>2011-07-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-28-non-defined-code-blocks-can-still-tangle.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** non-defined code blocks can still tangle</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-28</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src text :tangle somewhere.txt
</span>  This will still tangle out to a file, and it opens in text mode, which
  may be nice.  
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>premature-truncation-of-emacs-lisp-results</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-07-28-premature-truncation-of-emacs-lisp-results.html"/>
   <updated>2011-07-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-07-28-premature-truncation-of-emacs-lisp-results.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** premature truncation of emacs-lisp results</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-07-28</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  '<span class="starter-kit-paren">(</span>nil nil nil nil<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: (nil nil nil nil)
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>plot-results-with-org-plot</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-02-plot-results-with-org-plot.html"/>
   <updated>2011-08-02:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-02-plot-results-with-org-plot.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** plot results with org-plot</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-02</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: disk-usage
</span><span class="org-block-begin-line">#+begin_src sh :exports both
</span>  df
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+PLOT: title:"Disk Usage" ind:6 deps:(5) type:2d with:histograms set:"yrange [0:100]"
#+results: disk-usage
</span><span class="org-table">| Filesystem | 1K-blocks |     Used | Available | Use% | Mounted   | on |</span>
<span class="org-table">| /dev/sda6  |  28835836 |  8447712 |  18923344 |  31% | /         |    |</span>
<span class="org-table">| none       |   2997072 |      676 |   2996396 |   1% | /dev      |    |</span>
<span class="org-table">| none       |   3006056 |        0 |   3006056 |   0% | /dev/shm  |    |</span>
| none       |   3006056 |       96 |   3005960 |   1% | /var/run  |    |
| none       |   3006056 |        0 |   3006056 |   0% | /var/lock |    |
| /dev/sda7  | 144176824 | 72225604 |  64627420 |  53% | /home     |    |

   </pre>
   </content>
</entry>
<entry>
   <title>bug-with-undefined-function-copy-seq</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-05-bug-with-undefined-function-copy-seq.html"/>
   <updated>2011-08-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-05-bug-with-undefined-function-copy-seq.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** bug with undefined function copy-seq</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-05</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src R :session :exports both
</span>  1:10
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>tangle-before-evaluating-a-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-05-tangle-before-evaluating-a-code-block.html"/>
   <updated>2011-08-05:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-05-tangle-before-evaluating-a-code-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** tangle before evaluating a code block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-05</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-block-begin-line">#+begin_src sh :var TANGLED=(org-babel-tangle) :tangle no
</span>  wc $<span class="variable-name">TANGLED
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 2  2 11 it.sh
</span>
<span class="org-block-begin-line">#+begin_src sh :tangle it.sh
</span>  <span class="builtin">echo </span>TEST
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>replacing-a-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-19-replacing-a-table.html"/>
   <updated>2011-08-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-19-replacing-a-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** replacing a table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+results: this-is-the-table
</span><span class="org-table">| 1 | 4 | 7 |</span>
<span class="org-table">| 2 | 5 | 8 |</span>
<span class="org-table">| 3 | 6 | 9 |</span>

<span class="org-meta-line">#+source: this-is-the-table
</span>#+begin_src emacs-lisp :var table=this-is-the-table
  (mapcar (lambda (row) (mapcar (lambda (cell) (* cell 2)) row)) table)
#+end_src

   </pre>
   </content>
</entry>
<entry>
   <title>ruby-code-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-19-ruby-code-block.html"/>
   <updated>2011-08-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-19-ruby-code-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** ruby code block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src ruby
</span>  1+2
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 3
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>simple-ditaa-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-19-simple-ditaa-block.html"/>
   <updated>2011-08-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-19-simple-ditaa-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple ditaa block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src ditaa :file work-flow.png
</span>    +-------+             +--------+
    |       |             |        |
    | Org   |------------&gt;| Tex    |
    |       |             |        |
    +-------+             +--------+
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-link">[[file:work-flow.png]]</span>

   </pre>
   </content>
</entry>
<entry>
   <title>space-around-exported-code-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-19-space-around-exported-code-blocks.html"/>
   <updated>2011-08-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-19-space-around-exported-code-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** space around exported code blocks</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-19</span>
<span class="org-special-keyword">   :END:</span>
try evaluating the following blocks, then removing their results with
M-x `org-babel-remove-result'

Verbiage to begin the paragraph
#+begin_src sh
  echo eric
#+end_src
and verbiage to end the same paragraph.

#+begin_src sh
  echo 1
  echo 2
#+end_src

and verbiage to end the same paragraph.

   </pre>
   </content>
</entry>
<entry>
   <title>updating-a-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-19-updating-a-table.html"/>
   <updated>2011-08-19:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-19-updating-a-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** updating a table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-19</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+results: this-is-another-table
</span><span class="org-table">| 0 | 0 | 0 |</span>
<span class="org-table">| 0 | 0 | 0 |</span>
<span class="org-table">| 0 | 0 | 0 |</span>

<span class="org-meta-line">#+source: this-is-another-table
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var table=this-is-another-table
</span>  <span class="starter-kit-paren">(</span>setf <span class="starter-kit-paren">(</span>nth 1 table<span class="starter-kit-paren">)</span> '<span class="starter-kit-paren">(</span>2 2 2<span class="starter-kit-paren">))
</span>  table
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>inline-code-block-and-downstream-src-blocks</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-21-inline-code-block-and-downstream-src-blocks.html"/>
   <updated>2011-08-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-21-inline-code-block-and-downstream-src-blocks.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** inline code block and downstream src blocks</span>
   :PROPERTIES:
   :DATE:     2011-08-21
   :END:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
something src_sh{echo eric}
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
#+begin_src sh
  echo schulte
#+end_src
EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

*** with R
    :PROPERTIES:
    :DATE:     2011-08-21
    :END:
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
blah blah src_R[:results output]{cat(rnorm(2))}
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
#+begin_src R :eval never :exports none
  1+2
  a &lt;- b + c
  xyz
#+end_src
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD

   </pre>
   </content>
</entry>
<entry>
   <title>shell-script-output-not-in-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-21-shell-script-output-not-in-table.html"/>
   <updated>2011-08-21:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-21-shell-script-output-not-in-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** shell script output not in table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-21</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+begin_src sh :results scalar
</span>  <span class="builtin">echo</span> 1
  <span class="builtin">echo</span> 2
  <span class="builtin">echo </span>3
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 1
: 2
: 3
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>a-table-with-tags</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-23-a-table-with-tags.html"/>
   <updated>2011-08-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-23-a-table-with-tags.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** a table with tags</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-23</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+TBLNAME: sandbox           :noexport:
</span><span class="org-table">| 1 |         2 | 3 |</span>
<span class="org-table">| 4 | org-babel | 6 |</span>

<span class="org-block-begin-line">#+begin_src emacs-lisp :var table=sandbox
</span>  <span class="starter-kit-paren">(</span>message <span class="string">"%S"</span> table<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: ((1 2 3) (4 "org-babel" 6))
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>inheriting-the-file-property</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-23-inheriting-the-file-property.html"/>
   <updated>2011-08-23:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-23-inheriting-the-file-property.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** inheriting the file property</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:FILE:</span> <span class="org-property-value">something.png</span>
   :DATE:     2011-08-23
   :END:

#+begin_src ditaa
   +-----------------------------+
   |                             |
   |    +-----+                  |
   |    |     |   +---------+    |
   |    |     |   |         |    |
   |    +-----+   |         |    |
   |              |         |    |
   |   file       |         |    |
   | inheritance  +---------+    |
   |                             |
   +-----------------------------+
#+end_src

#+results:
[[file:something.png]]

   </pre>
   </content>
</entry>
<entry>
   <title>two-blocks-and-a-table</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-28-two-blocks-and-a-table.html"/>
   <updated>2011-08-28:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-28-two-blocks-and-a-table.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** two blocks and a table</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-28</span>
<span class="org-special-keyword">   :END:</span>

<span class="org-meta-line">#+source: stuff
</span><span class="org-block-begin-line">#+begin_src sh
</span>  <span class="builtin">echo</span> 1
  <span class="builtin">echo</span> 2
  <span class="builtin">echo </span>3
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+source: last-of-stuff
</span><span class="org-block-begin-line">#+begin_src sh :var input=stuff
</span>  <span class="builtin">echo</span> <span class="string">"$input" </span>|tail -1
<span class="org-block-end-line">#+end_src
</span>
<span class="org-table">| one |</span>
<span class="org-table">| two |</span>
<span class="org-table">| 3   |</span>
<span class="org-meta-line">#+TBLFM: @3$1='(sbe last-of-stuff)
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>convert-results-to-all-string</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-29-convert-results-to-all-string.html"/>
   <updated>2011-08-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-29-convert-results-to-all-string.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** convert results to all string</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-29</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+source: hetero-table
</span><span class="org-block-begin-line">#+begin_src emacs-lisp
</span>  '<span class="starter-kit-paren">((</span>1 2 3 4<span class="starter-kit-paren">)</span>
    <span class="starter-kit-paren">(</span><span class="string">"a"</span> <span class="string">"b"</span> <span class="string">"c"</span> <span class="string">"d"</span><span class="starter-kit-paren">))
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+source: all-to-string
</span><span class="org-block-begin-line">#+begin_src emacs-lisp :var tbl='()
</span>  <span class="starter-kit-paren">(</span><span class="keyword">defun</span> <span class="function-name">all-to-string</span> <span class="starter-kit-paren">(</span>tbl<span class="starter-kit-paren">)</span>
    <span class="starter-kit-paren">(</span><span class="keyword">if</span> <span class="starter-kit-paren">(</span>listp tbl<span class="starter-kit-paren">)</span>
        <span class="starter-kit-paren">(</span>mapcar #'all-to-string tbl<span class="starter-kit-paren">)</span>
      <span class="starter-kit-paren">(</span><span class="keyword">if</span> <span class="starter-kit-paren">(</span>stringp tbl<span class="starter-kit-paren">)</span>
          tbl
        <span class="starter-kit-paren">(</span>format <span class="string">"%s"</span> tbl<span class="starter-kit-paren">))))</span>
  <span class="starter-kit-paren">(</span>all-to-string tbl<span class="starter-kit-paren">)
</span><span class="org-block-end-line">#+end_src
</span>
#+begin_src emacs-lisp :var tbl=hetero-table
  (mapcar (lambda (row) (mapcar (lambda (cell) (stringp cell)) row)) tbl)
#+end_src

#+results:
| nil | nil | nil | nil |
| t   | t   | t   | t   |

#+begin_src emacs-lisp :var tbl=all-to-string(hetero-table)
  (mapcar (lambda (row) (mapcar (lambda (cell) (stringp cell)) row)) tbl)
#+end_src

#+results:
| t | t | t | t |
| t | t | t | t |

   </pre>
   </content>
</entry>
<entry>
   <title>simple-short-r-block</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-08-29-simple-short-r-block.html"/>
   <updated>2011-08-29:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-08-29-simple-short-r-block.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple short R block</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-08-29</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-block-begin-line">#+BEGIN_SRC R
</span>c(1,23,54,5)
<span class="org-block-end-line">#+END_SRC
</span>
<span class="org-meta-line">#+results:
</span><span class="org-table">|  1 |</span>
<span class="org-table">| 23 |</span>
<span class="org-table">| 54 |</span>
<span class="org-table">|  5 |</span>

   </pre>
   </content>
</entry>
<entry>
   <title>simple-gnuplot-plotting-of-org-mode-tables</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-09-01-simple-gnuplot-plotting-of-org-mode-tables.html"/>
   <updated>2011-09-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-09-01-simple-gnuplot-plotting-of-org-mode-tables.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple gnuplot plotting of Org-mode tables</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-09-01</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+tblname: gnuplot-testing
</span><span class="org-table">| x |  y |</span>
<span class="org-table">|---+----|</span>
<span class="org-table">| 1 |  2 |</span>
<span class="org-table">| 2 |  4 |</span>
<span class="org-table">| 3 |  6 |</span>
<span class="org-table">| 4 |  8 |</span>
<span class="org-table">| 5 | 10 |</span>
<span class="org-table">| 6 | 12 |</span>
<span class="org-table">| 7 | 14 |</span>
<span class="org-table">| 8 | 16 |</span>

<span class="org-block-begin-line">#+begin_src gnuplot :var data=gnuplot-testing :file output.eps
</span><span class="constant">set</span> term postscript
<span class="constant">set</span> <span class="type">title</span> "test"
<span class="constant">set</span> auto x
<span class="constant">set</span> style data histogram
<span class="constant">set</span> style fill solid border -1
<span class="constant">set</span> boxwidth 0.9
<span class="keyword">plot</span> <span class="variable-name">data</span> <span class="type">using </span>2:xtic(1)
<span class="org-block-end-line">#+end_src
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>simple-indexing</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-09-01-simple-indexing.html"/>
   <updated>2011-09-01:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-09-01-simple-indexing.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** simple indexing</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-09-01</span>
<span class="org-special-keyword">   :END:</span>
<span class="org-meta-line">#+data: list-o-numbers
</span><span class="org-table">| 1 | 2 | 3 |</span>
<span class="org-table">| 4 | 5 | 6 |</span>
<span class="org-table">| 7 | 8 | 9 |</span>

<span class="org-block-begin-line">#+begin_src sh :var column=list-o-numbers[,0]
</span>  <span class="builtin">echo</span> $<span class="variable-name">column
</span><span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-code">: 1 4 7
</span>
   </pre>
   </content>
</entry>
<entry>
   <title>returning-file-type-to-inline-call-line</title>
   <link href="http://eschulte.github.com/org-scraps/scraps/2011-09-04-returning-file-type-to-inline-call-line.html"/>
   <updated>2011-09-04:00:00:00-06:00</updated>
   <id>http://eschulte.github.com/org-scraps/scraps/2011-09-04-returning-file-type-to-inline-call-line.html</id>
   <content type="html">
   <pre>
<span class="org-level-2">** returning file type to inline call line</span>
<span class="org-special-keyword">   :PROPERTIES:</span>
   <span class="org-special-keyword">:DATE:</span>     <span class="org-property-value">2011-09-04</span>
<span class="org-special-keyword">   :END:</span>
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec
hendrerit tempor tellus. Donec pretium posuere tellus. Proin quam
nisl, tincidunt et, mattis eget, convallis nec, purus. Cum sociis
natoque penatibus et magnis dis parturient montes, nascetur ridiculus
mus. Nulla posuere. Donec vitae dolor. Nullam tristique diam non
turpis. call_nothing_to_something()[:results file] <span class="org-link">[[file:something.txt]]</span> Cras placerat
accumsan nulla. Nullam rutrum. Nam vestibulum accumsan nisl.

<span class="org-meta-line">#+source: nothing_to_something
</span><span class="org-block-begin-line">#+begin_src sh :file something.txt
</span>  <span class="builtin">echo </span>nothing
<span class="org-block-end-line">#+end_src
</span>
<span class="org-meta-line">#+results:
</span><span class="org-link">[[file:something.txt]]</span>

   </pre>
   </content>
</entry>
</feed>
